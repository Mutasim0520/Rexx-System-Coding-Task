{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "MOitTdg3yP-M"
   },
   "source": [
    "<strong>Answer Sheet: Lab3 , Team : 15</strong>\n",
    "\n",
    "<table>\n",
    "  <tr>\n",
    "    <td>\n",
    "      <table>\n",
    "       <tr><td><b>Faiz Ahmed</b></td></tr>\n",
    "        <tr><td>1152231</td></tr>\n",
    "        <tr><td>stu225473@mail.uni-kiel.de</td></tr> \n",
    "      </table> \n",
    "    </td>\n",
    "    <td>\n",
    "      <table>\n",
    "        <tr><td><b>Mithun Das</b></td></tr>\n",
    "        <tr><td>1151651</td></tr>\n",
    "        <tr><td>stu225039@mail.uni-kiel.de</td></tr>\n",
    "      </table> \n",
    "    </td>\n",
    "    <td>\n",
    "      <table>\n",
    "        <tr><td><b>Mutasim Fuad Ansari</b></td></tr>\n",
    "        <tr><td>1152109</td></tr>\n",
    "        <tr><td>stu225365@mail.uni-kiel.de</td></tr>\n",
    "      </table> \n",
    "    </td>\n",
    "    <td>\n",
    "      <table>\n",
    "        <tr><td><b>Mohammad Abir Reza</b></td></tr>\n",
    "        <tr><td>1151705</td></tr>\n",
    "        <tr><td>stu225093@mail.uni-kiel.de</td></tr>\n",
    "      </table> \n",
    "    </td>\n",
    "  </tr>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 1 (Learning in neural networks)\n",
    "\n",
    "a) Explain the following terms related to neural networks as short and precise as possible. \n",
    "\n",
    "* Loss function\n",
    "* Stochastic gradient descent\n",
    "* Mini-batch \n",
    "* Regularization\n",
    "* Dropout\n",
    "* Batch normalization\n",
    "* Learning with momentum\n",
    "* Data augmentation\n",
    "* Unsupervised pre-training / supervised fine-tuning\n",
    "* Deep learning\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Answer\n",
    "\n",
    "## Loss function: \n",
    "Loss is nothing but a prediction error of Neural Net. And the method to calculate the loss is called Loss Function.There are few common loss fuctions tat are used such as,Mean Squared Error (MSE), cross-entropy loss function,Log-likelihood loss for softmax activation function.\n",
    "\n",
    "## Stochastic gradient descent : \n",
    "Gradient descent is an iterative algorithm for optimization, that starts from a random point on a function and travels down its slope in steps until it reaches the lowest point of that function. But, in large data set with redundant data, gradient descent is not efficient. Because it increases more computational work. SGD randomly picks single training example per epoch.\n",
    "\n",
    "## Mini-batch : \n",
    "In mini-batch, small portion of training data per epoch is used. Thumb rule for selecting the size of mini-batch is in power of 2 like 32, 64, 128 .\n",
    "\n",
    "## Regularization : \n",
    "Regularization is the idea of restricting the degrees(reducing weights or hidden-layer) of fredom of a machine learning model for the perpous of more efficient learning.\n",
    "\n",
    "## Dropout : \n",
    "Dropout is a regularization technique where some nodes remains inactive in hidden-layer randomly for reducing complexity and increasing efficiency.\n",
    "\n",
    "## Batch normalization :\n",
    "To improve accuracy and speed up training Batch normalization is applied. Batch normalization (BN) is a technique to normalize activations in intermediate layers of deep neural networks.\n",
    "\n",
    "## Learning with momentum : \n",
    "Neural network momentum is a simple technique that often improves both training speed and accuracy. Training a neural network is the process of finding values for the weights and biases so that for a given set of input values, the computed output values closely match the known, correct, target values. Learning with momentum is a technique applied in gradient descent learning to improve convergence. For small learning rates, gradient descent based learning too large, the weight update may overshoot, leading to an oscillating loss function. In stochastic gradient descent the true gradient of the loss function is approximated by the average gradient calculated on a small mini-batch of training examples. Thus, the weight changes will not be perpendicular to the isocontours of the loss function, and take different directions at each weight update step. If the learning rate is small enough, this erratic behavior of the weight updates will still lead to the local minimum of the loss function. Learning with momentum is a compromise that smoothes the erratic behavior of the mini-batch updates, without slowing down the learning too much.\n",
    "\n",
    "## Data augmentation : \n",
    "Data augmentation is the process of artificially generating additional training data with more variation by rotation,scale and some other methods, by applying some distortion to original training images.\n",
    "\n",
    "## Unsupervised pre-training / supervised fine-tuning :\n",
    "Training deep feed-forward neural networks can be difficult because of local optima in the objective function and because complex models are prone to overfitting. Unsupervised pre-training initializes as discriminative neural net from one which was trained using an unsupervised criterion, such as a deep belief network or a deep autoencoder. This method can sometimes help with both the optimization and the overfitting issues.\n",
    "\n",
    "## Deep learning : \n",
    "Deep learning is a subfield of machine learning concerned with algorithms inspired by the structure and function of the brain called artificial neural networks. Deep learning use multiple layers to progressively extract higher level features from raw input."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "d8ahoTHxBW82"
   },
   "source": [
    "b) Name the most important output activation functions f(z), i.e., activation function of the output neuron(s), together with a corresponding suitable loss function L (in both cases, give the mathematical equation). Indicate whether such a perceptron is used for a classification or a regression task."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Answer \n",
    "\n",
    "## i. Binary Step Function:\n",
    "\n",
    "a. Mathematical Equation: f(x) = 0 if x>= 0\n",
    "\n",
    "b. Use case: It is used while creating a binary classifier.\n",
    "\n",
    "## ii. Linear Function:\n",
    "\n",
    "a. Mathematical Equation: f(x) = ax\n",
    "\n",
    "b. Use case: It is used for Regression related tasks.\n",
    "\n",
    "## iii. Sigmoid Function:\n",
    "\n",
    "a. Mathematical Equation: f(x)=1/(1+e^-x)\n",
    "\n",
    "b. Use case: classify the values to particular classes.\n",
    "\n",
    "## iv. Tanh:\n",
    "\n",
    "a. Mathematical Equation: tanh(x)=2/(1+e^(-2x)) -1\n",
    "\n",
    "b. Use case: Classification.\n",
    "\n",
    "## v. ReLU:\n",
    "\n",
    "a. Mathematical Equation: f(x)=max(0,x)\n",
    "\n",
    "b. Use case: Regression, but Non-Negative.\n",
    "\n",
    "## vi. Softmax:\n",
    "\n",
    "Use case: Classification"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 2 (Multi-layer perceptron: Backprogagation, regression problem)\n",
    "a) Consider the multi-layer perceptron in the following figure: \n",
    "\n",
    "![IMAGE: perceptron](images/MLP.png)\n",
    "\n",
    "The activation function at all hidden nodes is ReLU and at the output node linear. \n",
    "\n",
    "Perform one iteration of plain backpropagation (without momentum, regularization etc.), based on a mini-batch composed of two input samples ${x}^{(\\mu)}$ with corresponding target values $y^{(\\mu)}$, learning rate $\\eta$ and SSE loss:\n",
    "\n",
    "${x}^{(1)}=(-1,1)^T$ with target $y^{(1)}=1$ and ${x}^{(2)}=(2,-1)^T$ with target $y^{(2)}=-1$  \n",
    "\n",
    "The initial weights and biases are given as ($t$ is the iteration index):\n",
    "\n",
    "${W}^1(t=0)=\\begin{bmatrix} 1 & 2 \\\\ 0 & -1 \\\\ -1 & -3 \\\\ -2 & 2 \\end{bmatrix}$; \n",
    "${W}^2(t=0)=\\begin{bmatrix} 1 & 0 & -1 & 2 \\end{bmatrix}$\n",
    "\n",
    "${b}^1(t=0)=\\begin{bmatrix} -2 \\\\ 2 \\\\ 0 \\\\-2 \\end{bmatrix}$;\n",
    "${b}^2(t=0)=-2$\n",
    "\n",
    "For the forward path, calculate the postsynaptic potential (PSP), the activations and outputs and insert them into the following table:\n",
    "\n",
    "Input<br> ${x}=(x_1, x_2)^T = a^0$ | PSP<br> $z^1$ | Activation<br> $a^1$ |  Ouput<br>$\\hat{y}=a^2$ \n",
    ":--------:|:--------:|:--------:|:--------:\n",
    "$(-1, 1)^T$ |   | | |  \n",
    "$(2, -1)^T$ |   | | |  \n",
    " \n",
    "For the backward path, calculate the updated weights and biases for the hidden and output layer and insert them into the following table:\n",
    "\n",
    "Weights<br> $W^1(t=1)$ | Bias<br> $b^1(t=1)$ | Weights<br> $W^2(t=1)$ |  Bias<br> $b^2(t=1)$ \n",
    ":---:|:---:|:---:|:---:\n",
    " |   | | |  \n",
    " |   | | | "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Answer\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "dHDU9m2hChSn"
   },
   "source": [
    "b) The goal of this exercise is to train a multi-layer perceptron to solve a high difficulty level nonlinear regression problem. The data has been generated using an exponential function with the following shape:\n",
    "\n",
    "![IMAGE: perceptron](images/Eckerle4Dataset.png)\n",
    "\n",
    "This graph corresponds to the values of a dataset that can be downloaded from the Statistical Reference Dataset of the Information Technology Laboratory of the United States on this link:\n",
    "http://www.itl.nist.gov/div898/strd/nls/data/eckerle4.shtml\n",
    "\n",
    "This dataset is provided in the file Eckerle4.csv. Note that this dataset is divided into a training and test corpus comprising 60% and 40% of the data samples, respectively. Moreover, the input and output values are normalized to the interval [0, 1]. Basic code to load the dataset and divide it into a training and test corpus, normalizing the data and to apply a multi-layer perceptron is provided in the Jupyter notebook.\n",
    "\n",
    "Choose a suitable network topology (number of hidden layers and hidden neurons, potentially include dropout, activation function of hidden layers) and use it for the multi-layer perceptron defined in the Jupyter notebook. Set further parameters (learning rate, loss function, optimizer, number of epochs, batch size; see the lines marked with *# FIX!!!* in the Jupyter notebook). Try to avoid underfitting and overfitting. Vary the network and parameter configuration in order to achieve a network performance as optimal as possible. For each network configuration, due to the random components in the experiment, perform (at least) 4 different training and evaluation runs and report the mean and standard deviation of the training and evaluation results. Report on your results and conclusions.\n",
    "\n",
    "(Source of exercise: http://gonzalopla.com/deep-learning-nonlinear-regression)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:516: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint8 = np.dtype([(\"qint8\", np.int8, 1)])\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:517: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint8 = np.dtype([(\"quint8\", np.uint8, 1)])\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:518: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint16 = np.dtype([(\"qint16\", np.int16, 1)])\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:519: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint16 = np.dtype([(\"quint16\", np.uint16, 1)])\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:520: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint32 = np.dtype([(\"qint32\", np.int32, 1)])\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:525: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  np_resource = np.dtype([(\"resource\", np.ubyte, 1)])\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.py:541: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint8 = np.dtype([(\"qint8\", np.int8, 1)])\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.py:542: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint8 = np.dtype([(\"quint8\", np.uint8, 1)])\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.py:543: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint16 = np.dtype([(\"qint16\", np.int16, 1)])\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.py:544: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint16 = np.dtype([(\"quint16\", np.uint16, 1)])\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.py:545: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint32 = np.dtype([(\"qint32\", np.int32, 1)])\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.py:550: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  np_resource = np.dtype([(\"resource\", np.ubyte, 1)])\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from os.path import join\n",
    "from tensorflow.keras.layers import Dense, Dropout, Activation\n",
    "from tensorflow.keras import Model, Input, Sequential\n",
    "from tensorflow.keras.optimizers import SGD, Adam, Adadelta, Adagrad, Nadam, RMSprop\n",
    "from tensorflow.keras.utils import normalize\n",
    "import pandas\n",
    "from sklearn import preprocessing\n",
    "from sklearn import model_selection\n",
    "import sys\n",
    "\n",
    "###--------\n",
    "# load data\n",
    "###--------\n",
    "\n",
    "# Imports csv into pandas DataFrame object.\n",
    "path_to_task = \"nndl/Lab4\"\n",
    "Eckerle4_df = pandas.read_csv(join(path_to_task,\"Eckerle4.csv\"), header=0)\n",
    " \n",
    "# Converts dataframes into numpy objects.\n",
    "Eckerle4_dataset = Eckerle4_df.values.astype(\"float32\")\n",
    "# Slicing all rows, second column...\n",
    "X = Eckerle4_dataset[:,1]\n",
    "# Slicing all rows, first column...\n",
    "y = Eckerle4_dataset[:,0]\n",
    " \n",
    "# plot data\n",
    "plt.plot(X,y, color='red')\n",
    "plt.legend(labels=[\"data\"], loc=\"upper right\")\n",
    "plt.title(\"data\")\n",
    "plt.show()\n",
    "\n",
    "###-----------\n",
    "# process data\n",
    "###-----------\n",
    "\n",
    "# Data Scaling from 0 to 1, X and y originally have very different scales.\n",
    "X_scaler = preprocessing.MinMaxScaler(feature_range=(0, 1))\n",
    "y_scaler = preprocessing.MinMaxScaler(feature_range=(0, 1))\n",
    "X_scaled = ( X_scaler.fit_transform(X.reshape(-1,1)))\n",
    "y_scaled = (y_scaler.fit_transform(y.reshape(-1,1)).reshape(-1) )\n",
    " \n",
    "# Preparing test and train data: 60% training, 40% testing.\n",
    "X_train, X_test, y_train, y_test = model_selection.train_test_split( X_scaled, y_scaled, test_size=0.40, random_state=3)\n",
    "\n",
    "\n",
    "###-----------\n",
    "# define model\n",
    "###-----------\n",
    "\n",
    "num_inputs = X_train.shape[1] # should be 1 in case of Eckerle4\n",
    "num_hidden = [20,11,7] # for each hidden layer: number of hidden units in form of a python list   # FIX!!!\n",
    "num_outputs = 1 # predict single number in case of Eckerle4\n",
    "\n",
    "activation = 'relu' # activation of hidden layers   # FIX!!!\n",
    "dropout = 0 # 0 if no dropout, else fraction of dropout units (e.g. 0.2)   # FIX!!!\n",
    "\n",
    "# Sequential network structure.\n",
    "model = Sequential()\n",
    "\n",
    "if len(num_hidden) == 0:\n",
    "  print(\"Error: Must at least have one hidden layer!\")\n",
    "  sys.exit()  \n",
    "\n",
    "# add first hidden layer connecting to input layer\n",
    "model.add(Dense(num_hidden[0], input_dim=num_inputs, activation=activation))\n",
    "\n",
    "if dropout: \n",
    "  # dropout of fraction dropout of the neurons and activation layer.\n",
    "  model.add(Dropout(dropout))\n",
    "  # model.add(Activation(\"linear\"))\n",
    "\n",
    "# potentially further hidden layers\n",
    "for i in range(1, len(num_hidden)):\n",
    "  # add hidden layer with len[i] neurons\n",
    "  model.add(Dense(num_hidden[i], activation=activation))\n",
    "#  model.add(Activation(\"linear\"))\n",
    "\n",
    "  if dropout:\n",
    "  # dropout of fraction dropout of the neurons and activation layer.\n",
    "    model.add(Dropout(dropout))\n",
    "  #  model.add(Activation(\"linear\"))\n",
    "\n",
    "# output layer\n",
    "model.add(Dense(1))\n",
    "\n",
    "# show how the model looks\n",
    "model.summary()\n",
    "\n",
    "# compile model\n",
    "opt = SGD(learning_rate=0.1)\n",
    "model.compile(loss='mse', optimizer=opt, metrics=[\"mean_squared_error\"])# FIX!!!\n",
    "\n",
    "# Training model with train data. Fixed random seed:\n",
    "np.random.seed(3)\n",
    "num_epochs = 215# FIX !!!\n",
    "batch_size = 3 # FIX !!! \n",
    "history = model.fit(X_train, y_train, epochs=num_epochs, batch_size=batch_size, verbose=2)\n",
    "\n",
    "###-----------\n",
    "# plot results\n",
    "###-----------\n",
    "\n",
    "print(\"final (mse) training error: %f\" % history.history['loss'][num_epochs-1])\n",
    "\n",
    "plt.plot(history.history['loss'], color='red', label = 'training loss')\n",
    "plt.legend(labels=[\"loss\"], loc=\"upper right\")\n",
    "plt.title(\"training (mse) error\")\n",
    "plt.show()\n",
    "\n",
    "# Plot in blue color the predicted data and in green color the\n",
    "# actual data to verify visually the accuracy of the model.\n",
    "predicted = model.predict(X_test)\n",
    "plt.plot(y_scaler.inverse_transform(predicted.reshape(-1,1)), color=\"blue\")\n",
    "plt.plot(y_scaler.inverse_transform(y_test.reshape(-1,1)), color=\"green\")\n",
    "plt.legend(labels=[\"predicted\", \"target\"], loc=\"upper right\")\n",
    "plt.title(\"evaluation on test corpus\")\n",
    "plt.show()\n",
    "print(\"test error: %f\" % model.evaluate(X_test, y_test)[0])"
   ]
  },
  {
   "attachments": {
    "2.png": {
     "image/png": ""
    },
    "3.png": {
     "image/png": ""
    },
    "8.png": {
     "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXQAAAEICAYAAABPgw/pAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAgAElEQVR4nOydd3hU1daH350ekkBCCh0SSmCACV3hggIWEDXYC2KDgKBgvV7btV3s5UOlKKAoqGDXK1iwgXoFBCF0EgIJIKGmEpKQOvv7Y2fCkMwkk2Rakv0+Tx4y5+yzz5qJ/maftdZeS0gp0Wg0Gk3jx8vdBmg0Go3GMWhB12g0miaCFnSNRqNpImhB12g0miaCFnSNRqNpImhB12g0miaCFnRNgxBCHBBCXOSkuRcIIZ5wxtwaTVNEC7rGIxBC3C6E+MPymJRyupTyGXfZZA9CiF+FEFMcMM8oIUS6I2zSNF+0oGs0zQghhI+7bdA4Dy3ozQQhRHshxBdCiAwhxH4hxD0Wx08LIVpbjB0ghMgUQvgKIboJIVYLIbIqji0TQoTauMcSIcSzFq/PWnUKIR4RQqQKIU4JIXYLIa6qOG4AFgDDhBD5QohcG/NNFULsE0JkCyFWCCHaW5yTQojpQoi9QogcIcR8IYSwYae/EOJ1IcSRip/XhRD+ljYLIf4phDghhDgqhJhkY57ngPOAeRV2z6s43ksI8VOFnXuEENdbXHNpxXs/JYQ4LIR4UAgRBHwPtK+YJ9/yvVlcGyiE+D8hxEEhxEkhxB9CiMCKc+OFELuEELkVTw0Gi+sOCCEeFkJsBwqEED4Vxx6tsCVHCPGeECKgYny1p6WKz7e7rfdg7fPRuAEppf5p4j+oL+7NwJOAH9AVSAPGVpxfDUy1GP8KsKDi9+7AxYA/EAn8DrxuMfYAcFHF70uAZy3OjQLSLV5fB7SvsOcGoABoV3HuduCPKnZXzgdcAGQCAytsmQv8bjFWAt8AoUBnIAO4xMbnMQv4E4iqeE/rgGcsbC6rGOMLXAoUAmE25voVmGLxOgg4BEwCfCrszQT6VJw/CpxX8XsYMNDaZ2XjXvMr7tcB8Ab+UfFZxFZ8lhdX2PwQsA/ws/gbbQU6AYEWx3ZWHGsNrLX4rK39LSTQvab3oH/c/6NX6M2DIUCklHKWlLJESpkGvA3cWHF+OTABoGJVe2PFMaSU+6SUP0kpi6WUGcBsYGR9jJBSfialPCKlNEkpPwH2AufYeflE4F0pZaKUshh4FLWij7YY86KUMldK+TewBuhfw1yzpJQnKt7Tf4BbLM6XVpwvlVJ+B+QDPe2083LggJTyPSllmZQyEfgCuNZi7t5CiJZSypyK87UihPACJgP3SikPSynLpZTrKj6LG4BvK/5OpcCrQCBK8M3MkVIeklKetjg2r+JYNvAcFf8N2EG93oPG+WhBbx50QT3O55p/gMeANhXnP0eJY3vgfNRq7H8AQogoIcTHFY/WecCHQER9jBBC3CqE2GphQ986zNUeOGh+IaXMB7JQq1Uzxyx+LwSC7Zmr4ndLF0eWlLLMzrmq0gU4t8pnPRFoW3H+GtSq/6AQ4jchxDA7540AAoBUK+eqfjYm1FOC5WdzyMp1lseqfgY1Ud/3oHEyWtCbB4eA/VLKUIufECnlpQBSylzgR+B64CbgIymluQznCyiBj5NStgRuBqz6plGP/S0sXptFDCFEF9RTwUwgXEoZinrkN89VW9nPIyixNM8XBIQDh2u5rta5UC6aI/WYB6rbfQj4rcpnHSylvBNASvmXlPIKlLvnv8CnNuapSiZQBHSzcq7qZyNQrhTLz8ba/J0sfrf8DM76Owoh2lpeVMN70LgZLejNg41AXkVgLFAI4S2E6CuEGGIxZjlwK2r1tdzieAjK5ZArhOgA/KuG+2wFLhVCtK4QgfsszgWhRCUDoCLQ2Nfi/HGgoxDCz8bcy4FJQoj+FQHM54ENUsoDNb5z63wEPC6EiBRCRKBiCx/WYx5Qdne1eP0NECuEuEWooLKvEGKIEMIghPATQkwUQrSqcI3kAeUW84QLIVpZu0nFqvtdYLZQgWxvIcSwis/iU+AyIcSFQghf4J9AMSo2UBMzhBAdhQqIPwZ8UnF8G9Cn4rMOAJ42X1DLe9C4GS3ozQApZTkQj/Ip70et9t4BLMVjBdADOC6l3GZx/D+owN5J4Fvgyxpu9QFKDA6gVvxmgUBKuRv4P2A9SryMqECcmdXALuCYECLTynv4BXgC5Y8+ilqp3lh1nJ08C2wCtgM7gMSKY/XhDeDaikyROVLKU8CYCtuOoNxAL6GCl6B89Qcq3FfTUU88SCmTUV80aRWuGmvujwcr7P0LyK6Y10tKuadinrmov208EC+lLKnF9uWov1Naxc+zFbakoILCP6PiHH9Uuc7qe9C4H3HmyVqj0TQXhBAHUNk5P7vbFo3j0Ct0jUajaSJoQddoNJomgna5aDQaTRNBr9A1Go2mieC2Qj0REREyOjraXbfXaDSaRsnmzZszpZSR1s65TdCjo6PZtGmTu26v0Wg0jRIhxEFb57TLRaPRaJoIWtA1Go2miaAFXaPRaJoIunuJRqNxGKWlpaSnp1NUVORuUxo9AQEBdOzYEV9fX7uv0YKu0WgcRnp6OiEhIURHRyOsN4zS2IGUkqysLNLT04mJibH7Ou1y0Wg0DqOoqIjw8HAt5g1ECEF4eHidn3S0oGs0Goeixdwx1Odz1IKusYvfD/5O4lHdaUyj8WS0oLsQKSUmaXK3GfUiYUUCU1ZMcbcZGo3LCQ5W3QePHDnCtddeW+PY119/ncLCwjrN/+uvv3L55ZfX2z5LtKC7kEd/eZTz3jvP3WbUmaKyItJy0thybAvpeenuNkejaTDl5XVvstS+fXs+//zzGsfUR9AdiRZ0F7I+fT1/pv9JcVmxu02pE3uz9lY+WXyT8o2brdFoaubAgQP06tWL2267jbi4OK699loKCwuJjo5m1qxZjBgxgs8++4zU1FQuueQSBg0axHnnnUdycjIA+/fvZ9iwYQwZMoQnnnjirHn79lVdE8vLy3nwwQcxGo3ExcUxd+5c5syZw5EjRxg9ejSjR48G4Mcff2TYsGEMHDiQ6667jvz8fABWrVpFr169GDFiBF9+WVMTsLqh0xZdSFpOGiZpYm/2XvpG9a39Ag8hKTMJgACfAFamrGT64OlutkjTGLjvPti61bFz9u8Pr79e+7g9e/awePFihg8fzuTJk3nzzTcBldv9xx+qo96FF17IggUL6NGjBxs2bOCuu+5i9erV3Hvvvdx5553ceuutzJ8/3+r8ixYtYv/+/WzZsgUfHx+ys7Np3bo1s2fPZs2aNURERJCZmcmzzz7Lzz//TFBQEC+99BKzZ8/moYceYurUqaxevZru3btzww03OOzz0St0F1FUVsThPNWEPSkjyc3W1I3kzGQEgtv63cYvab9QUFLgbpM0mhrp1KkTw4cPB+Dmm2+uFHGzeObn57Nu3Tquu+46+vfvz7Rp0zh69CgAa9euZcKECQDccsstVuf/+eefmT59Oj4+ak3cunXramP+/PNPdu/ezfDhw+nfvz9Lly7l4MGDJCcnExMTQ48ePRBCcPPNjmvJqlfoLuJg7kEkqpmIecXbWEjKTCI6NJrr+1zPws0L+SntJ67sdaW7zdJ4OPaspJ1F1ZQ/8+ugoCAATCYToaGhbLXxCFFbyqCU0q4xF198MR999NFZx7du3eq01E69QncRaTlplb83OkHPSKJXRC/O63werfxbsXLPSnebpNHUyN9//8369esB+OijjxgxYsRZ51u2bElMTAyfffYZoMR327ZtAAwfPpyPP/4YgGXLllmdf8yYMSxYsICysjIAsrOzAQgJCeHUqVMADB06lLVr17Jv3z4ACgsLSUlJoVevXuzfv5/U1NRK+xyFFnQXYRb0ge0GNiqXi0ma2JO1B0OEAV9vX8b1GMe3e79ttOmXmuaBwWBg6dKlxMXFkZ2dzZ133lltzLJly1i8eDH9+vWjT58+fP311wC88cYbzJ8/nyFDhnDy5Emr80+ZMoXOnTsTFxdHv379WL58OQB33HEH48aNY/To0URGRrJkyRImTJhAXFwcQ4cOJTk5mYCAABYtWsRll13GiBEj6NKli+PeuJTSLT+DBg2SzYkHVj0gA58NlA+sekAGPBsgy8rL3G2SXaRlp0meRi7atEhKKeWy7cskTyP/PPSnmy3TeCK7d+92twly//79sk+fPu42wyFY+zyBTdKGruoVuotIzUmla1hXekf2pqisiIMnbTYd8SjM7iFDpAGAcd3H4S28WbFnhTvN0mg0VtCC7iLSctLoGta1Uhgbi9slOVPl5hoilN1hgWGc1+U8VqZoP7rGM4mOjmbnzp3uNsMtaEF3AVLKM4JeIYyNJTCalJFERIsIwluEVx6Lj41nx4kdHMxtHE8ZGk1zQQu6C8gozKCgtICuYV0JCwyjTVCbxrNCz0qu/BIyEx8bD6BX6RqNh6EF3QWYM1y6hnUFlD+6Ma3Qe0X0OutYj/Ae9Azvqf3oGo2HoQXdBVQT9Agl6Cpg7blkFGSQdTqr2godYHzP8fx64FfyivPcYJlGo7GGFnQXYBb0mFDVSsoQYSC3KJfjBcfdaVatVAZEI6sLenxsPKWmUn5M/dHVZmk0NsnNza2s2+JMfv31V9atW+f0+9QVLeguIC0njfYh7Qn0DQRoNJkuZrdQVZcLwLBOw2gd2Fq7XTQeRV0FXUqJyVT3TXJa0Jsx5hx0M40l0yU5M5kWvi3o3KpztXM+Xj5c2uNSvtv7HeWmuteW1micwSOPPEJqair9+/fn/vvv58ILL2TgwIEYjcbKnaAHDhzAYDBw1113MXDgQA4dOsTixYuJjY1l1KhRTJ06lZkzZwKQkZHBNddcw5AhQxgyZAhr167lwIEDLFiwgNdee43+/fvzv//9z51v+Sx0cS4XkJaTxgUxF1S+bh/SnhC/kEaxQu8Z3hMvYf17f3zseD7c/iHr09czovMIq2M0zZf7Vt3H1mOOrZ/bv21/Xr/EdtWvF198kZ07d7J161bKysooLCykZcuWZGZmMnToUMaPHw+o8rrvvfceb775JkeOHOGZZ54hMTGRkJAQLrjgAvr16wfAvffey/3338+IESP4+++/GTt2LElJSUyfPp3g4GAefPBBh76/hqIF3cmYy+Z2DT2zQhdCNIpMl6SMJP7R6R82z4/tPhZfL19W7lmpBV3jcUgpeeyxx/j999/x8vLi8OHDHD+u4lZdunRh6NChAGzcuJGRI0dWlsC97rrrSElJAVSZ3N27d1fOmZeXV1l8yxPRgu5kzGVzLV0uoNwuP6X95CaraqewtJCDJw+SMCDB5piW/i0ZGT2SFSkreOnil1xonaYxUNNK2hUsW7aMjIwMNm/ejK+vL9HR0RQVFQFnyugCNWabmUwm1q9fT2BgoNPtdQTah+5kqqYsmjFEGDhy6ggni6xXc3M3ezL3ANYDopbEx8aTnJnMvux9rjBLo6kRy/K1J0+eJCoqCl9fX9asWcPBg9Z3Np9zzjn89ttv5OTkUFZWxhdffFF5bsyYMcybN6/ytbl+uuV9PAkt6E7GpqBXZLqYUwM9japFuWxRuWtU10jXeADh4eEMHz6cvn37snXrVjZt2sTgwYNZtmwZvXpZX5x06NCBxx57jHPPPZeLLrqI3r1706pVKwDmzJnDpk2biIuLo3fv3ixYsACA+Ph4vvrqKx0UbW6k5aQR6BNI2+C2Zx03Z7rsztjNuR3PdYdpNZKcmYyX8KJH6x41josJi6FvVF9Wpqzk/mH3u8g6jcY25trkNVG1eNdNN93EHXfcQVlZGVdddRVjxowBICIigk8++aTa9bGxsWzfvt0xBjsQvUJ3Mmm5qihX1ZZTMWEx+Hn7eWxgNCkzia5hXfH38a91bHxsPL8f/J2c0zkusEyjcTxPP/00/fv3p2/fvsTExHDllY2zxaJeoTuZ1OzUau4WUHncseGxHivoyZnVi3LZIj42nhf+eIFV+1YxwTjByZZpNI7n1VdfdbcJDkGv0J2IZdlcaxgiDB6Zi15mKiMlK6XWgKiZczqcQ2SLSF19UQPUnDWisZ/6fI5a0J2IZdlcaxgiDOzP3U9RWZGLLauZ/Tn7KSkvsXuF7u3lzeWxl/P9vu8pLS91snUaTyYgIICsrCwt6g1ESklWVhYBAQF1uk67XJyIrQwXM4ZIAyZpIiUrhbg2ca40rUZqKspli/jYeN7b+h5//P0Ho2NGO8s0jYfTsWNH0tPTycjIcLcpjZ6AgAA6duxYp2u0oDuRWgU94kyRLk8S9JqKctni4m4X4+ftx8qUlVrQmzG+vr7ExMS424xmi3a5OJGqZXOrEhsei0B4XGA0OTOZtsFtCQ0ItfuaYL9gLoi5gJUpK/XjtkbjJuwSdCHEJUKIPUKIfUKIR6ycny6E2CGE2CqE+EMI0dvxpjY+qpbNrUqgbyAxYTEeJ+hJmdW7FNnD+Njx7Mvex56sPU6wSqPR1Eatgi6E8AbmA+OA3sAEK4K9XEpplFL2B14GZjvc0kZITRkuZjwt00VKSVJGkt0BUUsuj70cQNdI12jchD0r9HOAfVLKNCllCfAxcIXlACmlZR+yIEA/c1O9Dro1DBEGUrJSPKam+PGC45wsPlkvQe/UqhP92/bX6YsajZuwR9A7AIcsXqdXHDsLIcQMIUQqaoV+j7WJhBB3CCE2CSE2NfUouLWyudYwRBooLi9mf+5+F1lWM+anhfq4XEBlu6w7tI6swixHmqXRaOzAHkEXVo5VW4FLKedLKbsBDwOPW5tISrlISjlYSjk4MjKybpY2MmyVza2KZaaLJ2BvUS5bjO85HpM08d3e7xxplkajsQN7BD0d6GTxuiNwpIbxHwONsxCCA6ktZdFMZX9RDwmMJmcmE+wXTIeQag9hdjGw3UDaBbdjRYr2o2s0rsYeQf8L6CGEiBFC+AE3Amf93yqEsCzJdxmw13EmNk7sFfTQgFDaBrf1GEE3Z7hULSZmL17Ci8tjL+eHfT9QUl7iYOvqx/8O/o/Mwkx3m6HROJ1aBV1KWQbMBH4AkoBPpZS7hBCzhBDjK4bNFELsEkJsBR4AbnOaxY0EW2VzreFJmS51Kcpli/jYeE6VnOK3A785yKr6s+nIJkYuGclLf+iOSpqmj107RaWU3wHfVTn2pMXv9zrYrkaPrbK51jBEGPhwx4dIKeu9MnYEp4pPkZ6XXu+AqJkLu15IoE8gK1NWcnG3ix1kXd0xSRMzv5uJRLL1uGObFWs0nojeKeok7MlBN2OINJBXnMfR/KNOtqpmKmu4NHCF3sK3BRd1vYgVe1a4ddfo0q1L2XB4A+2C27Hj+A632aHRuAot6E5ASmmzDro1PCXTpT5FuWwRHxvPwZMH2XliZ+2DnUBuUS4P//wwwzsN55/D/snxguNkFDTtVFmNRgu6E6itbG5VPCXTJSkzCR8vH7qFdWvwXOZdo+7aZPTUmqfIOp3FvEvnVRY+23FCr9I1TRst6E7A3gwXM+2C29HSv6VHrNC7t+6Or7dvg+dqF9KOIe2HuEXQdxzfwfy/5jNt0DT6t+2PsY2x8rhG05TRgu4E6iroQgiV6eIBK/SGBkQtiY+NZ0P6Bo7nH3fYnLUhpeTu7+8mNCCUZy94FoA2QW2IaBGhV+iaJo8WdCdQW9lcaxgi3SvopeWl7Mve1+CAqCXxPeORSL7d+63D5qyNT3Z9wm8Hf+P5C5+ndWBrQH1hGqOMWtA1TR4t6E6gtrK51jBEGDiWf4zcolwnWmab1JxUykxlDhX0fm360allJ5e5XfJL8vnnj/9kULtBJAxIOOucMcrIrhO7MEmTS2zRaNyBFnQnUJeURTPuznRpaFEuawghiI+N58fUH13SN/XZ35/lyKkjzLt0Ht5e3medM7YxUlBawP4czyiCptE4Ay3oTqBegu7mTBdzyqIjBR2U26WwtJDV+1c7dN6qpGSlMHv9bCb1n8TQjkOrnTdGVQRGtdtF04TRgu5gisuKSc9Lr7VsblViQmPw9/Z33wo9M4kOIR0I8Q9x6LyjokcR5BvEyj3Oc7tIKbnn+3sI9A3khQtfsDqmT1QfQGe6aJo2WtAdzIHcA3aVza2Kt5c3seGxbluhJ2UmOWRDUVUCfAIY022MU3uNrtizgh9Sf2DWqFm0CW5jdUywXzAxoTF6ha5p0mhBdzB1TVm0xF2ZLlJKhxTlssX4nuM5fOowW45tcfjcp0tPc98P99E3qi8zzplR41hjG53pomnaaEF3MA0S9AgD+3P2c7r0tKPNqpHDpw6TX5LvcP+5mUt7XIpAOMXt8vLalzmQe4C54+bi41VzrTljlJG9WXtdEqDVaNyBFnQHU5eyuVUxRBiQSFKyUpxgmW3MfntnrdCjgqIY2nGow9MXD+Qe4MW1L3Jj3xsZFT2q1vHGKCPlstztO3I1GmehBd3B1KVsblXcleniyKJctoiPjWfz0c0czjvssDkf+OEBvIU3r1z8il3jK0sAaLeLpomiBd3B1Cdl0UxseCxewsvlK8ikzCRa+beiTZD1gKIjGN9T9UL5JuUbh8z3w74f+Cr5Kx4//3E6tuxo1zU9WvfAz9vPbRUgNRpnowXdgUgpGyToAT4BxITGuGWFbog0OLW5Ru/I3sSExjjE7VJSXsI9q+6hR+se3D/0fruv8/X2xRBh0Ct0TZNFC7oDySjMIL8kv96CDu7JdHF0US5rmHeN/rL/FwpLCxs01+t/vk5KVgpzxs3B38e/Ttca2xh1LrqmyaIF3YE0JMPFjCHCQEpWCmWmMkeZVSO5Rbkcyz/mtICoJfE94ykqK+LntJ/rPcfhvMPM+m0WV/S8gku6X1Ln641RRg6fOkzO6Zx626DReCpa0B1IbYL+7bfwSi3xO0OEgZLyEpfVHHFU2zl7OL/L+bT0b8mKPSvqPcdDPz9EmamM18a+Vq/rdQkATVNGC7oDMQt6dGi01fOzZ8PDD0N6uu05XJ3p4oyiXLbw8/bjku6X8E3KN/Wqevj7wd9ZvmM5Dw9/mJgw+0sTW6KbXWiaMlrQHUhaThrtgtvRwrdFtXNSQmKi+vf9923P4eqqi8mZyfh5+9VbIOtKfGw8xwuOs+nIpjpdV2YqY+Z3M+nSqgsPj3i43vfvENKB0IBQvULXNEm0oDuQtJw0urW23o/zwAHIzQVvb3jvPSXs1mgV0Ip2we1ct0LPTKJH6x617rJ0FOO6j8NLeNV51+hbf73FjhM7eG3sa1a/MO1FN7vQNGW0oDuQmlIWExPVv3feCfv2wdq1tudxZaaLs4py2SK8RTjDOw1nRYr9fvQTBSd4Ys0TjOk2hit7XdlgG4xRRnae2Om0YmEajbvQgu4gaiubu3kz+PjA009DUJBapdvCEGEgKSPJ6YJTXFZMWk6aSwKilozvOZ7tx7dzMPegXeMf/flRCksLmXPJHIfkyhvbGMkrzuPvk383eC6NxpPQgu4gaiubm5gIfftCeDhcfz18+ikUFFifyxBh4FTJKY6cOuJEi2Fv9l5M0uSSgKgl8bHxgH27Rjce3si7W9/l/qH30zOip0PurzNdNE0VLegOoqaURXNAdOBA9XrSJMjPh88/tz6XqzJdnF2UyxY9I3rSo3WPWneNmqSJGd/NoF1wOx4//3GH3b9vVF9AZ7pomh5a0B1ETYJ++DBkZJwR9BEjoHt3224XV2W6mHPQY8NjnXofa8THxrPmwBpOFZ+yOebdLe+y6cgmXh3zqkM7KbUKaEXnVp31Cl3T5NCC7iDSctII8AmwWjbXHBA1C7oQcPvt8NtvkJZWfa62wW1p5d/K+Sv0zCS6tOpCkF+QU+9jjfE9x1NSXsKPqT9aPZ99OptHfn6E8zqfx4S+Exx+/75RfbWga5ocWtAdRE1lcxMTwcsL4uLOHLv1ViXsS5ZUn0sI4ZJMF3NRLncwvPNwwgLCbLpdnlzzJDlFOcy7dJ5TioYZo4wkZyZTUl7i8Lk1GnehBd1BpOWk0S3Meg56YiL06qWyW8x06gQXXwxLl4LJyqZJc6aLszBJE8mZyfQKd21A1IyPlw/jeozj273fUm4qP+vctmPbeGvTW8wYMoO4NnE2ZmgYxigjZaYy9mTuccr8Go070ILuAGorm2sZELVk0iT4+29Yvbr6OUOEgeMFx51WROrvk39zuuy021booPzomYWZ/Jn+Z+UxKSUzv59JeGA4s0bPctq9dbMLTVNEC7oDqKls7vHjKig6aFD16668EkJD4d13q59zdqaLOSDq6pRFSy7pfgk+Xj5nuV2W71jOH3//wQsXvkBoQKjT7t0rohc+Xj662YWmSaEF3QHUlOFSNSBqSUAA3HQTfPWVKgtgibMzXdyVsmhJaEAo53c5v1LQ84rzePCnBxnSfgiTBkxy6r39vP3oGd5Tr9A1TQot6A7AHkHv39/6tZMmQVERfPzx2cejQ6Px9/Z36go9PDCcyKBIp8xvL/Gx8ezO2E1qdirP/PYMx/OPM//S+XgJ5/+nqZtdaJoaWtAdQE1lcxMToUcPaNnS+rWDBqkdpFVz0r29vOkZ0dNpgu6KLkX2YN41+sq6V3h9w+skDEhgSIchLrm3McrIwZMHySvOc8n9NBpnowXdAdRUNtdWQNSMEGqVvnEj7N599jlnZrokZSa51d1iplvrbvSO7M3CzQsJ9gvm+Qufd9m9zSUAtB9d01TQgu4AbGW4ZGersrk1CTrAzTerwl1VV+mGCAMHcg9wuvS044wFMgszySzMrFOGS2Gh7dozDcW8Sn9m9DMudQHpZheapoZdgi6EuEQIsUcIsU8I8YiV8w8IIXYLIbYLIX4RQnRxvKmei6066Fu2qH9rE/SoKLjsMvjgAygtPXPcEGlAItmT5dhc6bpmuJSVwbnnQlgYjB4NL76o3pu1/Pn6cM+59/DSRS8xffB0x0xoJ11adSHEL0QHRjVNhloFXQjhDcwHxgG9gQlCiN5Vhm0BBksp44DPgZcdbainUlPZXHNAdMCA2ueZNEmlOK5adeaYszJd6tpH9L33YOdOuO469dTx6KPqS6p9e7jlFvjwQzhxov72tA9pz0PDH3JZkw0zQp9WSAsAACAASURBVAhdAkDTpLBnhX4OsE9KmSalLAE+Bq6wHCClXCOlLKx4+SfQ0bFmei41lc1NTIQuXVTJ3Nq49FK1Urd0u8SGx+IlvBweGE3KSCLAJ4DOrTrXOragAJ56Cv7xDyXc27bBkSOqZMEFF6gvoFtugTZtlMg/+ij8+iuUNJId9cYolemim11omgL2CHoH4JDF6/SKY7ZIAL5viFGNidpSFq1tKLKGr6/ypa9cqSozAvj7+NM1rKvjBT0ziZ7hPfH28q517Ouvw9Gj8PLLKoAL0K4d3HYbLF+unio2bYLnnoOQEHj1VeWWCQ+H8eNh/nzVoclTMbYxklOU4/Ta8xqNK7BH0K1VRrK6nBFC3AwMBl6xcf4OIcQmIcSmDLNqNXJsCXpeHqSk1O4/t2TSJOWvXrbszDFnZLrYW5QrIwNeegmuuAKGD7c+xstLfWk99piqHpmVBf/9r1q179oFM2eqtM1u3eCuu+Drr9Vn4ynoZheapoQ9gp4OdLJ43RGotpwRQlwE/BsYL6UstjaRlHKRlHKwlHJwZKR7N7Q4Cltlc7duVf/WRdD79oXBg89uIm2IMJCSlUKZqcwh9p4uPc2B3AN2FeV69lnlcnnhBfvnb9lSfQG8+SakpsLevTBvHvTpA++/r8odhIfD+eerVf2mTY4LrtYHnemiaUrYI+h/AT2EEDFCCD/gRuCsDr9CiAHAQpSYNyA81viwVTa3pi3/NTFpEmzffiZDxhBpoNRUWvkk0FD2ZO1BImtdoaelwVtvQUICGBqQrt69O8yYAStWqIDqmjXw4IOqY9Pjj8OQIcr/PnUqnHZsdqZdtA5sTfuQ9nqFrmkS1CroUsoyYCbwA5AEfCql3CWEmCWEGF8x7BUgGPhMCLFVCGF/S/dGjq2yuYmJKgukTZu6zTdhAvj7nwmOOjrTxd6UxccfP9PU2lH4+cGoUWrFn5io/O8ffghjx8I77yihdwc600XTVLArD11K+Z2UMlZK2U1K+VzFsSellCsqfr9IStlGStm/4md8zTM2DWoqm1vbDlFbhIUpt8Ty5VBcfEZ4HRUYTcpIwkt41dh2bvNm+OgjuP9+9aXkLKKiYOJEJeoPPqjcNF9+6bz72cIYZSQpI8lhbi2Nxl3onaINILMw02rZ3MJCSEqqn6CDcrtkZys3RauAVrQPae8wQU/OSiYmNIYAnwCr56WEhx9Wfu6HHnLILe3iueeU+yUhAQ4edN19QQl6cXkxe7P2uvbGGo2D0YLeAFJzUoHqGS7bt6tAX30F/aKLoGPHs90ujnK5JGXUXJTrxx/hl1/giSegVSuH3NIu/PzUU0F5uSopXObCxbJudqFpKmhBbwC2UhbrGxA14+2teo7+8INqjmGIMJCcmdzgzS/lpnJSslJs7hA1mdTqPCYGprt2Fz6gUhsXLoR16xzru68NQ4QBL+Gli3RpGj1a0BuArbK5iYkQGalW2fVl0iQlsO+/rzJdTpWc4vCpww2wVu1qLS4vtrlCX75c7QR97jkVmHUHEybA5Mnw/PPWW/M5g0DfQHq07qFX6JpGjxb0BmCrbO7mzWp13pBm9d27w3nnKbdLr3DHZLqY/fDWUhaLilRmy8CBcMMNDbpNg5kzB3r2VDtnXbX/TDe70DQFtKA3AGsZLsXFqpBVfd0tlkyapDbm5B9wTH/RmlIW33xTBSNfeknt/nQnQUHwyScqMHzbba7ZeGSMMpKWk0ZBiZNqBGs0LkALegOwVjZ3504V0HOEoF93nRK3r5e3ITQgtOEr9IwkooKiaB3Y+qzjubnKzTJmjArIegJxcTB7Nnz/vaon42yMUUYkkl0Zu5x/M43GSWhBrye2yuY2NCBqSXCwEvVPPxH0bG1o8ArdVpeil16CnBz1rydx551w1VXwyCOqRIAz0SUANE0BLej15ODJg1bL5iYmqnS/mBjH3GfSJLVN3j+vYYIupVRFuaoIenq6WgFPnGi7kbW7EELtIG3bFm680blFvbqGdaWFbwsdGNU0arSg15PUbOs56OYdog0JiFpy3nkqnS99m4ETBSfIPp1dr3lOFJwgpyinmv/8qaeUj/qZZxxhreNp3Vpl3+zfr1bszipb7iW86BPZRwu6plGjBb2eWMtBLy1VaX+OcLeYEQJuvx3S/mxYpou1DJddu1SjihkzIDq6gYY6kREj4D//UcK+dKnz7mNudqHRNFa0oNcTa2Vzk5NVlosjBR1UpgeZDct0sZbh8sgjqinFv//dYBOdzqOPqsYZM2aoz9kZGNsYySjM4Hj+cefcQKNxMlrQ64m1srmODIha0qkTXDS4C6IsgN31XaFnJBHkG0Snlqq0/e+/wzffKFG3p0Weu/H2VkW8WrRQ/vSiIsffQze70DR2tKDXE2s56Js3q8yUWNuFDOvN5EneyMyerN1TzxV6VjK9InohhKgswNWhA9x7r4MNdSLt2ysX0bZt8K9/OX5+nemiaexoQa8H5rK5VeugJyaqTBFnbMy58krwzTWw60T9V+hmd8uXX8Kffyq/dGCgI610Ppddpsr6zpun2tk5kqigKKKCovQKXdNo0YJeD6yVzS0vV23nHO1uMRMYCP06GCjwOcjRzMI6XZtfks+hvEMYIgyUlip/dO/eFb75RsgLL6g+ppMmwaFDtY+vC7rZhaYxowW9HljLcNm7V/XfdJagA1x9ngGEZP4ne+p03Z5MNb5XRC/eeUfZ+uKLqiNRY8TfHz7+WGUVObrUrjHKyK4Tuyg3lTtuUo3GRWhBrwfW6qA7KyBqyeVDVabLJ7/Uze1izozpEmTgP/9Rue2XX+5w81xK9+6wYAH88Ydjc+iNUUZOl512WA9XjcaVaEGvB9bK5iYmQkBAwxoq10ZseA8EXuzLTSKpDpqenJmMt/BmxZLuHD8OL7/suI1P7mTiRJWj/8wz8OuvjplTN7vQNGa0oNcDa2VzExNVQSlnujH8ffyJadUNopJYssT+65Iyk4hu2Y3XXvXjmmtg6FCnmehy5s5VWUUTJ0JmZsPn6xPZB4HQmS6aRokW9HpQNWVRyvo3ha4rfdsaCI5O4v337fcdJ2UkYTph4PRpVVWxKREcrPzpmZkqSNrQ0gBBfkF0DevKzgzdvUjT+NCCXg+qCvr+/XDypGsE3RBhoKjFXo6dKGPVqtrHl5aXsi97Hwc29WLqVNU4oqnRvz+8+qraKDVnTsPn080uNI0VLeh1xFw21zIHffNm9e+gQc6/vyHCQJksJaxbamUT6ZpIy0mj1FSK70kDTz3lfPvcxcyZMH682nBk/nvUF2OUkb3Zezldetoxxmk0LkILeh2xVjY3MRF8faFPH+ff31xca8SVSaxcWbvfeMV6VfjklksMtG1b89jGjBDw7rvQpo0qDXDqVP3nMkYZMUlTg+vPazSuRgt6HbGWg56YCH37uqaxsnm3Z8w5SZSWwrJltsdKCW99rkTp6buboK+lCuHh6vNIS1NFvOqLLgGgaaxoQa8jVeuguzIgCtDSvyUdQjqQ453EoEHU6Hb5/nvYn5dEK9GejhGtXGOgmzn/fFXj/YMP4P336zdH99bd8ff216mLmkaHFvQ6UrVsbnq6cnu4StBBuV2SMpOYNEkVqtqypfqY8nJVgMu/YzIDuzgxOd4D+fe/YeRIuOsuSEmp+/U+Xj70juytBV3T6NCCXkeqls11xQ7RqhgiDCRnJnPjjRI/P+ur9A8+gJ07JV5RSfSO7FV9QBPGXGo3IED504uL6z6HznTRNEa0oNeRqimLiYmqumJcnOtsMEQYyC/Jp9AnnSuvVH5jS9E6fRqeeAL6jTjCadMpq42hmzodO6ovui1b1JNKXTFGGTmaf5SswizHG6fROAkt6HXAXDa3a+jZgm4wqMYLrsKc6WJ2u2Rnw8qVZ87Pm6dcQbc8UL1LUXMiPl7Ve3/jDRVPqAue0OzicN5hDPMNrDu0zm02aBoXWtDrgLlsbrfWZ3LQXRkQNWNecSdlJHHxxapRhdntkp0Nzz8P48aBf4fqfUSbGy+9pJpsP/983a7zhEyX+X/NJzkzmdf+fM1tNmgaF1rQ60DVlMVjx+DIEdcLelRQFGEBYSRlJuHtDbfeCqtWKVteeEHtWn3xRVWUq6V/S9oFt3OtgR6Evz9Mn66qMu7aZf917YLb0TqwtdtW6EVlRbyd+Dbewpuvk78moyDDLXZoGhda0OtAVUE3B0RdsUPUEiFEZaYLqIqDJpOq0zJ3rhL4uDjlkjG3nWvO3H47+PnBwoX2XyOEcGuzi493fkxmYSazx86m1FTKh9s/dIsdmsaFFvQ6YK6Dbi6baxb0/v1db4shwkBSRcPo2FgYPhzefFOdmzVL/ZuUkdQsA6JViYiAa69VeemFdWj2ZIwysvPETkzS5DzjrCClZM6GOfSO7M3d59zNuR3OZfGWxciGVh7TNHm0oNeBqmVzExOVmIaEuN4WQ4SBjMKMyiyMSZPU8Xvugc6d4WTRSY7mH222AdGqTJumXFGffGL/NcYoI/kl+RzMPeg8w6yw7tA6thzbwt3n3I0QgoQBCezK2MWGwxtcaoem8aEFvQ5YS1l0tf/cjGWmC8DNN8Nrr6l0RVD+c0Cv0Cs47zyVjbRggf3XuKvZxdyNc2nl34qb424G4Ma+NxLkG8TixMUutUPT+NCCXgcsBT0rCw4edKOgW2S6gAr+3XffmaeFSkFvxhkulgihgqMbN1rfWWuNvlF9Addmuhw5dYQvkr5g8oDJBPsFAxDiH8L1fa7n410fk1+S7zJbNI0PLeh2UrVsrlkU3CXoXUK7EOgTaLMiYFJmEr5evmc9UTR3brlF7R61Nzja0r8lXVp1cWmziwWbFlBuKmfGkLOriyUMSCC/JJ/Pdn3mMls0jQ8t6HZStWyuOSA6YIB77PESXvSM6FmjoPcI74GPlxN74jUywsJUKYBly+wvr+vKEgDFZcUs3LyQS3tcetZeB4B/dPoHPcN7sniLdrtobGOXoAshLhFC7BFC7BNCPGLl/PlCiEQhRJkQ4lrHm+l+rKUsRkdD69bus8ky06UqyZnJOiBqhWnTID8fli+3b7wxysierD2UlJc41zDgs92fcaLgBHefc3e1c+bg6NpDayvdaRpNVWoVdCGENzAfGAf0BiYIIXpXGfY3cDtg5/8mjY+qgr55s/vcLWYMEQYOnjxIQUnBWcdLyktIzU7VAVErnHsu9Oun3C72ZAEao4yUmcpcIqJzN84lNjyWi7tdbPX8rf1uxcfLRwdHNTaxZ4V+DrBPSpkmpSwBPgausBwgpTwgpdwOuDZh14WkZqdWls09eRL27XP9hqKqmAOee7L2nHV8b9ZeymW5FnQrCKFW6Vu2wF9/1T7eVSUANqRvYOPhjdx9zt14Cev/W7YJbkN8bDzvb3+f0vJSp9qjaZzYI+gdgEMWr9MrjtUZIcQdQohNQohNGRmNayuzZdncrVvVMU9YoQPV3C7m1aR2uVhn4kQICrIvhbFneE98vXydnro4d+NcQvxCuK3fbTWOSxiQwImCE3yT8o1T7dE0TuwRdGv7xuu1ZU1KuUhKOVhKOTgyMrI+U7gNy5RFdwdEzfQI74G38K4WGDW/1oJunZYtlah//DHk5tY81tfbl14RvZwq6Mfyj/Hprk+5vf/thPjXvEttbPextA9pr4OjGqvYI+jpQCeL1x2BI84xxzOpWjY3MVFVOGzTxr12+Xn70a11t2qCnpyZTOdWnQnyC3KTZZ7PtGmqbvwHH9Q+1tmZLos2L6LUVMrMc2bWOtbHy4fb+93O9/u+53DeYafZpGmc2CPofwE9hBAxQgg/4EZghXPN8iyqls115w7RqljLdDEX5dLYZuBAGDLEvuCoMcrIobxD5BbVspyvByXlJSzYtICx3cYSGx5r1zWTB0zGJE0s3bbU4fZoGje1CrqUsgyYCfwAJAGfSil3CSFmCSHGAwghhggh0oHrgIVCiDoUKvV8LDNcCgogOdmzBH1v9t7KIJlJmkjOTNYBUTuYNk2V1F27tuZx5mYXO084foPRl0lfcjT/qNVURVt0a92NUdGjWLxlscsLh2k8G7vy0KWU30kpY6WU3aSUz1Uce1JKuaLi97+klB2llEFSynApZR9nGu1qLAV9+3ZVqtZjBD3SQJmprLISZHpeOoWlhXqFbgc33qj86bXtHHVmpsvcjXPpFtaNcT3G1em6hAEJpOWk8duB3xxuk6bxoneK2oFZ0KNDo93SFLomqma6mP/VK/TaCQpS5QA++0zV5rFFp5adaOnf0uGB0cSjiaw7tI6Z58y0mapoi2sM19DKv5UOjmrOQgu6HaTmpFaWzU1MhMhIFRT1BMwrcXNgVBflqhvTpqkG20trcEc7q9nF3I1zCfINYlL/SXW+NtA3kInGiXyR9IVTfPuaxokWdDuwTFk07xD1lCZAIf4hdGzZsVLQkzKTCAsII7JF40oLdRdGI/zjHyonvabgqDFKZbo4qslERkEGH+34iFv73UqrgFb1miNhYAJFZUUs39FkN2hr6ogWdDswC3pRkQqiuXuHaFUsM12SMpMwRBqafdu5ujB9OuzdC2vW2B5jjDJysvgk6XnpDrnn24lvU1xebFeqoi0GthtI/7b9tdtFU4kW9Fowl83tGtaVnTuhrMxz/OdmDBEGkjOTKzNceoXrgGhduPZaVWStpuCoI5tdlJnKeGvTW1wYcyG9I6uWRaobCQMSSDyayJajdhZ5byK89RasW+duKzwPLei1YC6b2y2sm8cFRM0YIg0UlBaw/fh2ThSc0P7zOhIYCLfdBl9+CcePWx9jTl10RKbLf5P/S3peep1SFW0x0TgRf2//ZrVKT02Fu+5SWUp16RHbHNCCXguWKYuJiRAaqsrmehLmjJavkr4667XGfqZNU09f771n/XxYYBgdQjo4pNnF3I1ziQ6N5vLYyxs8V1hgGFcbrmbZjmWcLj3d4PkaA4sWgZcXHDoEL7zgbms8Cy3otVBV0D0pIGrGvCL/MvlLQNdwqQ89e8KoUUosTDb26jiiBMD249v5/eDvzBgyA28v7wbNZWbKwCnkFuXyVfJXDpnPkykuVl+6V1wBN90EL7+sVuwahRb0WkjLSSPAJ4Bw/7Zs3+557haAyBaRtA5szc4TO/H39ic6NNrdJjVKpk+H/fvhp5+snzdGGUnKTGpQ6dq5G+YS6BPI5AGT6z1HVUZFjyImNKZZuF2++goyMtTf6pVXwM8P7r/f3VZ5DlrQayE1J5WuYV1JThYUF3umoAshKt0sseGxDlv5NTeuukrtMbBVVtcYZaSkvIS92XvrNX9WYRbLdizj5ribaR3ouFZXXsKLyQMms3r/6sonyqbKggXQtStcdBG0bw9PPgkrV8K337rbMs9AC3otmFMWPTUgasYs6DogWn/8/GDyZCUQh60UMmxoCYDFWxZzuuy0Q4KhVbm9/+14CS/e22IjCNAESEqC336DO+5QPnSAe+9V7rJ774WiIvfa5wloQa8By7K5mzdDcDD06OFuq6xjFnIdEG0Yd9wB5eWw2Ir3whBhwFt41yt1sdxUzpt/vcnILiMrvxgcSceWHRnbbSzvbX2PclO5w+f3BBYtAl9fmGSxsdbPD+bMUX702bPdZ5unoAW9Bsxlc80r9AEDzqwMPA2zkOuAaMPo2hXGjIG331ZZL5b4+/gTGx5bL0FfmbKSgycPcs+59zjI0uokDEjg8KnD/JD6g9Pu4S5On4YlS+DqqyEq6uxzY8Yod9lzz6nMl+aMh8qTZ3CmKFc3tm71XHcLwIVdL+Tli15mfM/x7jal0TN9OqSnw/ffVz9X30yXuRvn0qllJ6f+feJ7xhPZIrJJBkc//VR1l5o+3fr52bNVdtKDD7rWLk9DC3oNmAXdK7crhYWeLeh+3n78a/i/aOHbwt2mNHouvxzatbMeHDVGGdmfu59Txafsnm/XiV2s3r+au4bchY+XjwMtPRs/bz9u7XcrK/as4ETBCafdxx0sXKh85SNHWj8fHQ2PPKKEf/Vql5rmUWhBrwGzoGfsjQY8W9A1jsPXF6ZMUSv0gwfPPmfeMborw/4eLvM2zsPf258pA6c40kyrJAxIoMxUxgfb7Oit10jYtg3Wr1er85r2gDz0kBL2e+6B0vpnljZqtKDXQFpOGu2C27FrawsCAqCXdk83G6ZMUeLx9ttnH69rpktuUS7vb3+fm4w3EdEiwtFmVsMQaWBYx2Es3rLYYZUh3c3CheDvD7feWvO4wEB4/XVVQG/+fNfY5mloQa8Bcw56YiL06wc+znta1ngYnTvDpZeqbBfL1V50aDRBvkF2B0bf2/IehaWFTklVtEXCgASSMpNYn77eZfd0Fvn58OGHcMMNqoBabYwfD2PHwlNP2a7L05TRgl4DaTlpxIR29aim0BrXMW0aHDsGKyxaonsJL/pE9bFL0MtN5cz7ax7DOw1nQLsBdb7/8eNqF2RKSt2uu77P9QT5BrE4sfEHRz/6CE6dsh0MrYoQ8MYbKivmkUeca5snogXdBuayuWF0JS9PC3pzZNw46NSpenDU3mYX3+/7nrSctHqlKu7dqxpvvP662hWZXocy7CH+IdzQ5wY+2fVJnYK3noaUqkxuXBwMHWr/dT17wgMPqDTH9Y3/IaVOaEG3gblsbnmm6lSkBb354e2tNhr9/DPs23fmuDHKSNbpLI7lH6vx+rkb59IhpANX9bqqTvfduFGJeV4evPOOStcbM6bmvqdVSRiYQEFpAZ/u+rRO9/YkNm2CLVvUk1JdC+I9/rgqDTBzptoo1lzQgm4Dc4bLyQPd8PWFvn3dbJDGLUyerIR90aIzx+xpdrEncw8/pv7I9MHT8fX2tft+33wDo0dDy5aqgUNCgnL5pKWpdMqCAvvmGdZxGIYIQ6POSV+4UDXyvvnmul8bHAyvvgqJidZ3/TZVtKDbwCzoh7Z1xWhUW4w1zY/27VWp1vfeU6Vbwb5mF/M2zsPP2487Bt1h973eflvdy2BQYm4uMzFqlPIlb9wI11wDJSW1zyWEIGFAAuvT17M7Y7fdNngKubnqPd90k/pyqw833gjnnw+PPlq3p5vGjBZ0G5jL5u7c0Fa7W5o506ZBZqbqaAQQGRRJm6A2NlfoecV5LNm2hBv63EBUUJTVMZZICU8/rdw7Y8bAr79CmzZnj7nqKrVi/eEHuP122zXbLbml3y34ePk0yuDohx+qbkTTptV/DiFg7lw4eRKeeMJxtnkyWtBtkJaTRqfgrmRnCS3ozZyLLlI1Xix7jhrbGNl5wnr3oqVbl5Jfkm9XqmJZGUydCv/5jxLqFSuUu8AaU6aoDj0ffQT33ae+CGoiKiiK8T3H8/729ykpt2NZ7yFIqQLRgwc3vCF7XJxqV7dwofLHN3W0oNsgNSeVViYdENWogmx33KFKtyYlqWPGKCO7MnZVq2xokibm/TWPoR2HMqTDkBrnLShQLpbFi9UK8t131S7Vmnj4YZXKOHeuKkZVGwkDEsgszGTlnpW1D/YQ1q1Tm4NspSqWmcpYuGkh/zv4P7vmmzULwsNVgLSJ7LWyiRZ0K5jL5nrldsXbW33La5o3kyYpsTWv0o1RRorKikjNObv/2U+pP5GSlVLr6vzECRX8XLVKrUZnzbIvk0MIFey75Rb1JWD51GCNsd3G0iGkQ6MKji5YoPzmN95Y/dy2Y9s4951zmf7tdM5fcj4P/PAARWU1F0IPDYUXX1RfFB9+6CSjPQQt6FYwl83NT++KwaC2FGuaN1FRKiC5dKnatGKrBMCcjXNoG9yWa3tfa3OufftUWuLOnaqlWl39xF5ealV/2WVw553w+ee2x3p7eTOp/yR+SP2B9Lw6JLO7icxM+Owz9YUVFHTmeHFZMU+ueZLBbw8mPS+d5Vcv587Bd/Lan68xaNEgNh/ZXOO8t98O55wD//qXSgdtqmhBt4I5w+Xorm7a3aKpZNo0lX3x6afQO7I3AnFWYHRf9j6+3/s90wZNw8/belrUX38pMc/NVVUBx9ezmq6vr7Jj2DCYOBF++cX22EkDJmGSJpZsXVK/m7mQpUtVNpHll9zGwxsZtGgQz/z+DBP6TmD3XbuZYJzAm5e9yaqJq8gtymXo4qHM+m2WzX6vXl4wb556Mpo1y0Vvxh1IKd3yM2jQIOmpLN++XPI0kshd8vXX3W2NxlMwmaTs2VPKYcPU6x5zesirP7m68vx9398nfWb5yCN5R6xe/803UrZoIWVMjJR79jjGpuxsKfv2lTI4WMq//rI97oKlF8jo16NluancMTd2AiaTlD16SDl8uHpdUFIgH/zhQen1Hy/ZcXZH+W3Kt1avyy7Mljd9cZPkaeSQRUNkckayzXtMmSKlj4+Uu3Y54x24BmCTtKGreoVuhcpGu7nReoWuqUQItXJcvx62bz+72UV+ST7vbn2X63pfR7uQdtWuXbxYBUB79VK+3NhYx9gUFqZSGcPDVakCW3VfEgYkcCD3AGv2r3HMjZ3AmjWq5MH06fD7wd/pt6Afr65/lakDp7Lrrl1c2uNSq9eFBYax7OplfHLtJ6TmpNJ/YX/mbpiLSVbP7Xz+eZVFdM89TTNAqgXdCmk5aYTQDlHWgv793W2NxpO47TZVynXhQhUY3Ze9j8LSQj7Y9gF5xXnVgqFSqkf8KVNU+uOvv0Lbto61qX17+Okn9YVz8cXWG1xf1esqQgNCPTo4umABhLU5xR8tZzByyUhM0sTqW1ez4PIFtPSvfXfR9X2uZ+edO7kg5gLuWXUPYz4Yw6GTZ/eki4yEZ55RLirzvoImha2lu7N/PNnlMmrJKNn6weGyZ093W6LxRG65RcqQECk/3Py55GnkxvSNsvf83nLwosHSZDJVjistlXLqVClByttuk7KkxLl2bd6s7OrTR8qsrOrnZ3w7Q/o/4y+zC7Oda0g9OHZMSq/YVTLkyc5SPC3k/avul/nF+fWay2QyyUWbFsmg54Jkyxdayve3vl/t/GRR7wAAEIBJREFU7xIXJ2WnTlIWFDjqHbgOtMulbqRmp1J0rKt2t2isMn26Kum6f4PKdJmzcQ67M3Zz9zl3IypyDwsK1O7Ot99WhaLee6/2HPOGMnAgfP21cltYq/uSMCCB4vJilu1Y5lxD6kjO6RwuXTQJ002XEBnagrWT1zJ77GyC/IJqv9gKQgimDprK9ju3E9cmjlv/eyvXfnYtGQUZgOprMG+eaij9wguOfCcegC2ld/aPp67Qi0qLpHhaSEY9JV95xd3WaDwRk0kFIgcOKpMBzwZInkZGvhwpi0qLpJRSnjgh5TnnSOnlJeVbb7nevi++UPceN676U8HAhQNlv7f6nbVidSdfJX0l277aVvKkt+wy6TF5uvS0Q+cvKy+TL//xsvR7xk9GvRIlv07+uvLcTTdJ6e8v5b59Dr2l00Gv0O3HXDaXHL1C11hHCLVKT9zsTXSL3gDcMegO/H38SU1VaYnbtysfrb2NGRzJ1Vcrf/T336sNUZZ1XxIGJLDt+DYSjya63jALThSc4IbPb+CqT66ihakNLPqLly95jgCfAIfex9vLm38N/xebpm6iXXA7rvj4ChK+TiCvOI9XXlFPTfff79BbuhUt6FWozHDJ7saAujeZ0TQTbr4ZWrQA09F+eAtvpg+ezqZNSsxzclSO+RVXuM++qVNVaYBly1SzB3NGx03GmwjwCXBbcFRKyfIdy+k9vzf/Tf4vz45+lj5r/yLKNIArr3TefY1tjGycupHHRjzGkm1LiHsrjr0lv/Hkk7ByJXz3nfPu7Uq0oFfBLOidQroSFuZmYzQeS6tWMGEC/P3Bk3x25XfsWNuRUaOUyK9dqzb8uJtHH1VFvN5444yvODQglGsM17B8x3JOl552qT2H8w5zxcdXMPHLiXRv3Z0t07ZwW9d/8+1KXxISnF+i2s/bj+cufI4/Jv2Br7cvo5eO5nDff9LDUMS9954pj9yY0YJehbScNERZAEMMDs4t0zQ5pk+HomPRvPvvMcTHq9zy9etVCzRPQAj4v/9TTxP//rcK0IJyu5wsPskXSV+4xA4pJe8kvkOfN/vwc9rP/N+Y/2Pt5LX0juzNO++op4epU11iCgDDOg1j67St3Dn4Tt7YOJvi2wexr2Azs2e7zgZnYZegCyEuEULsEULsE0JUa70qhPAXQnxScX6DECLa0Ya6ij0n0pDZXRk0sI49rzTNjsGDVWbJN9/AhReqaoyOzjFvKF5eqorjuHHqC+jLL2Fk9Ei6hnV1idtlf85+xnw4hqkrp9K/bX+237mdB4Y9gLeXN2VlqsXe2LEQE+N0U84iyC+I+ZfNZ9XEVZT55CLuGMpTvzzD/oNlrjXEwdQq6EIIb2A+MA7oDUwQQvSuMiwByJFSdgdeA15ytKGuYvexVMjp2uA6zJrmwbx5auPQypUQEuJua6zj66sKXp17rnIT/farF5P7T+bXA7+Smp1a+wQ1UG4qp6CkgKzCLI6cOkJaThq7M3aTeDSRN/58A+NbRjakb+Cty95i9W2r6d66e+W1336rNkG5I3BsZmz3sey8cyfju15P6XlPMvit4ezJ3OM+gxqIkLXsfxVCDAOellKOrXj9KICU8gWLMT9UjFkvhPABjgGRsobJBw8eLDdt2lRng5duXcobG97Ax8sHby9vfLx8Kn+8RZXXlueFfeOfWfMCJX9O4fjSN4iqvdmMRtNoyM5WLdn+/hs+/f4wl/3SmQtjLiSuTRxFZUU1/hSXF1s9XmaqeUV7SfdLWHj5Qjq36lzt3LhxsGMHHDigcsPdzfX/+YzPCqfjF1zIP/9xPxEtIlQ6IErGqv4OIJE2f7d2jfn3y2MvZ3D7wfWyUwixWUpp9WJ7PsYOgOX+2XTgXFtjpJRlQoiTQDiQWcWQO4A7ADp3rv4HtocQ/xA6tuxImamMMlMZ5bKcMlMZhaWF6rWpvNq5ytemKq8tzlfWfZCC1oXDtJhrmhytW6u6L8OHw61XdSD+lYms3L+MdYfWEeATUO3H38efAJ8AWgW0OnPc2/a4qj8RLSIY1nFY5WYrS/bvV7Y8+aRniDnA0oeuY/2gEeSedwcv/OHcHUdtgtrUW9Brwp6P0pozuerK254xSCkXAYtArdDtuHc1rjZczdWGq+tzaY1IKSmX5RjjTMR20x2hNU2TDh3gxx+VqG97+n0OrX2f9u1db8fbb6ug7ZQprr+3LQIDYd4L7bjyypW8+Nop7rxTIiqkzfylJBA2fzePs/V71WucgT1B0XSgk8XrjsARW2MqXC6tgGxHGOgqhBAs/9CHPbv9GOz4L06NxmOIjVWdkjIz4bzz1CYoV1JSoqpPxsdDx46uvXdtjB+vgrSz/h3CDytaEuIfQoh/CMF+wQT7BRPkF0QL3xa08G1BoG/gWU8p/j7++Hn74evti6+3b6Ub19vLGy/hhZfwcqqYg32C/hfQQwgRI4TwA24EVlQZswK4reL3a4HVNfnPPY3iYtVI9rbbYORImDHD3RZpNM5l0CBVobGoCIYOdW1rtv/+VzWaqGunJlcghKq7ExcH118PDz6oGnk3GmzVBLD8AS4FUoBU4N8Vx2YB4yt+DwA+A/YBG4Gutc3pKbVc/v5b1d0AKf/1L1WJTaNpLhw9KuXIkeq//xkzpCwudv49R4+WMjpayrIy59+rvhQVSXnXXepzGTlSfU6eAjXUcmnWxbl+/lnKiAhVcvTzz91tjUbjHkpLpXzwQaUGQ4dKeeiQ8+6VnKzu8/zzzruHI3n/fSkDA6Vs107KP/5wtzWKmgS9We4UlRJeegnGjFHNf//6SzUA1miaIz4+8MorKld9507ljlnjpMZGixap+02e7Jz5Hc0tt8Cff6qSDqNGwdy5nt3pqNkJ+smTSrwfeQSuuw42bPCcrdoajTu59lrYuFGlN150kRJ5R4pXUREsWaLqxLdp47h5nU1cHGzapPLm77lHlVKoWmveU2hWgr5zJwwZAitWwGuvwUcfqf6CGo1GYTAoUb/mGnjoISXyeXmOmfvzz9XmJnfuDK0voaEqmPvss0o3hg5VjUQ8jWYj6B99pLY+nzqlHifvu09FtDUazdmEhMAnn6jCXl9/DeecA7t3N3zeBQtUyuTo0Q2fyx14eakiZ6tWwZEjqpbP11+726qzafKCXlIC994LN92kCiklJqrcW41GYxshVB311ashN1eJ+qef1n++HTtUWeFp0xr/QmrMGKUjsbFw5ZXw2GNQXu5uqxRNWtCPHIELLoA5c9SKfPVqaPf/7d1/bFVnHcfx94ciVCYwxR8Z0HRzIZNBrAPmRpeQjNoEhQyzf0aDhAX+WaIwDAG3mGzZ/hATCZNEAzWoY7MbWeiIi5kKmWawrDroMHMT5hbErVqhZBMZmozGr398j6F2rT23W+9zz+n3lZDee8ulH27u/fQ5z3nOOVelThVCcSxZ4uXV1AR33OElf+lS5f9OeztMnuzHepRBYyMcOeKn/d22DZYtg76+1KlKXOiHD/uI/Phxn2556KGxv0hvCGU0c6ZPU27c6J+jlhbo7c3//IsX4dFHfRHCjBljl7Pa6ut91c6ePV7uCxf6/oeUSlfoZrBjh4/Mp0/3F3jVqtSpQii2SZP8ykePPQbd3T5Yeu65fM/dt893rBZxZ2ge69f7dNKECT6d296ebmljqQr9wgXfLNy82c/JcPQozJuXOlUI5dHW5kt9p071nZs7d45cXrt3++ewubk6GVNYuNB/0d16q//iWrcO/lXdK/wBJSr0kyd9FUtnpx801NkJ06alThVC+cyf74Ol5ct931RbG7zzztB/t7vb13DfdVfxd4aOZMYMv2jHfff5evvmZjh1qroZSlHonZ2+vvzcOT/h0Nat5X/zhJDS9Ol+Obtt2y5fDenVIS70097uR1muWVP9jCnU1cEDD/gVrE6f9pH7009X7+cXutD7+2HLFj/4Yd48Hw0sXZo6VQjjw4QJfsT1wYN+9sQbb4QDBy5///x5n3Nva/NfAOPJihW+ZdLY6Fsy999fnaWNhS30M2egtRW2b/dT3z77LDQ0jPy8EMIHq6XFlzbOnQu33+4l398PHR2+wqUWT5NbDddeC88/70s1H3zQS/6tMb5KRI1c/KkyXV0+Kn/7bXjkkfGzORdCrWpo8KXCmzb5PqwXXvBB14IFjOsLxkyZ4udXX7wYNmzwKZjOTn9dxkLhRuh79/pFKOrrvdijzEOoDZMnw65dXmBdXX66gPGwM3Qkkm+lHDniWy7Nzb7fYSwUrtDnzLk8P9XUlDpNCGGwO+/0qYYtW2D16tRpasdNN/nUVGur99hYkCVaAb9o0SI7duxYkp8dQghFJanbzIacyCrcCD2EEMLQotBDCKEkotBDCKEkotBDCKEkotBDCKEkotBDCKEkotBDCKEkotBDCKEkkh1YJKkP+PMon/5x4NwHGKeaInsakb36ipobajt7o5l9YqhvJCv090PSseGOlKp1kT2NyF59Rc0Nxc0eUy4hhFASUeghhFASRS30H6QO8D5E9jQie/UVNTcUNHsh59BDCCG8V1FH6CGEEAaJQg8hhJIoXKFLWibpVUmvS7ondZ68JDVI+rWkE5JekXR36kyVkFQn6bikn6XOUglJV0raL+lk9tovTp0pL0lfz94rL0t6XFJ96kzDkfQjSWclvTzgsY9JOiTptezrR1NmHM4w2b+TvWdeknRA0pUpM+ZVqEKXVAd8H/gicD3QJun6tKly6wc2m9lc4GbgqwXKDnA3cCJ1iFHYCfzCzD4DNFGQ/4OkWcBGYJGZzQfqgFVpU/1fDwPLBj12D/CMmc0Bnsnu16KHeW/2Q8B8M/ss8Efg3mqHGo1CFTrweeB1MztlZu8C+4CViTPlYma9ZvZidvsCXiyz0qbKR9JsYDmwJ3WWSkiaBiwBfghgZu+a2d/TpqrIRODDkiYCU4C/Js4zLDM7DLw16OGVwN7s9l7gy1UNldNQ2c3soJn1Z3d/A8yuerBRKFqhzwLeHHC/h4KU4kCSrgZuAH6bNklu3wW2Av9OHaRCnwb6gB9n00V7JF2ROlQeZvYXYDvwBtALnDezg2lTVexTZtYLPqABPpk4z2itA36eOkQeRSt0DfFYodZdSvoI0AlsMrN/pM4zEkkrgLNm1p06yyhMBBYAu8zsBuAitbvZ/z+y+eaVwDXATOAKSV9Jm2r8kfRNfLq0I3WWPIpW6D1Aw4D7s6nhzdDBJH0IL/MOM3sydZ6cbgFuk3Qan+JaKuknaSPl1gP0mNl/t4T24wVfBF8A/mRmfWZ2CXgSaE6cqVJnJF0FkH09mzhPRSStBVYAq60gB+wUrdCPAnMkXSNpEr6T6KnEmXKRJHwu94SZ7UidJy8zu9fMZpvZ1fjr/SszK8RI0cz+Brwp6brsoRbgDwkjVeIN4GZJU7L3TgsF2aE7wFPA2uz2WuCnCbNURNIy4BvAbWb2z9R58ipUoWc7Kb4G/BJ/cz9hZq+kTZXbLcAafIT7u+zPl1KHGgc2AB2SXgI+B3wrcZ5csq2K/cCLwO/xz2rNHo4u6XGgC7hOUo+k9cC3gVZJrwGt2f2aM0z27wFTgUPZZ3V30pA5xaH/IYRQEoUaoYcQQhheFHoIIZREFHoIIZREFHoIIZREFHoIIZREFHoIIZREFHoIIZTEfwDxf/WzrXZ9WgAAAABJRU5ErkJggg=="
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Answer\n",
    "\n",
    "### Configuration 1\n",
    "\n",
    "num_hidden = [20,11,7]\n",
    "dropout = 0\n",
    "num_epochs = 215 \n",
    "batch_size = 3\n",
    "Activation Function = relu\n",
    "learning rate = 0.1\n",
    "loss function = mean squared error\n",
    "optimizer = SGD\n",
    "batch size = 3\n",
    "\n",
    "![8.png](attachment:8.png)\n",
    "\n",
    "Mean = 0.0587084\n",
    "Standard deviation = 0.0101029\n",
    "\n",
    "### Configuration 2\n",
    "\n",
    "num_hidden = [20,11,7]\n",
    "dropout = 0\n",
    "num_epochs = 215 \n",
    "batch_size = 3\n",
    "Activation Function = relu\n",
    "learning rate = 0.1\n",
    "loss function = mean squared error\n",
    "optimizer = SGD\n",
    "batch size = 5\n",
    "\n",
    "![2.png](attachment:2.png)\n",
    "\n",
    "Mean = 0.0748863\n",
    "Standard deviation = 0.0126227\n",
    "\n",
    "### Configuration 3\n",
    "\n",
    "num_hidden = [25,20,7]\n",
    "dropout = 0\n",
    "num_epochs = 215 \n",
    "batch_size = 3\n",
    "Activation Function = relu\n",
    "learning rate = 0.1\n",
    "loss function = mean squared error\n",
    "optimizer = SGD\n",
    "batch size = 5\n",
    "\n",
    "![3.png](attachment:3.png)\n",
    "\n",
    "Mean = 0.0748863\n",
    "Standard deviation = 0.0126227\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "V0dZkCh_Cm2n"
   },
   "source": [
    "# Exercise 3 (Parameters of a multi-layer perceptron – digit recognition)\n",
    "\n",
    "In the following exercises, we use Tensorflow and Keras to configure, train and apply a multi-layer perceptron to the problem of recognizing handwritten digits (the famous “MNIST” problem). The MNIST data are loaded using a Tensorflow Keras built-in function.\n",
    "\n",
    "Perform experiments on this pattern recognition problem trying to investigate the influence of a number of parameters on the classification performance. This may refer to\n",
    "\n",
    "-\tthe learning rate and potentially learning schedule,\n",
    "-\tthe number of hidden neurons (in a network with a single hidden layer),\n",
    "-\tthe number of hidden layers as well as applying dropout and / or batch normalization,\n",
    "-\tthe solver (including momentum),\n",
    "-\tthe activation function at hidden layers,\n",
    "-\tregularization.\n",
    "\n",
    "The script in the Jupyter notebook can serve as a basis or starting point.\n",
    "\n",
    "Report your findings and conclusions.\n",
    "\n",
    "**Note: These experiments may require a lot of computation time!**\n",
    "\n",
    "**Further investigations and experiments as well as code extensions and modifications are welcome!**\n",
    "\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from os.path import join\n",
    "from tensorflow.keras.layers import Dense, Dropout, Activation, BatchNormalization\n",
    "from tensorflow.keras import Model, Input, Sequential\n",
    "from tensorflow.keras.optimizers import SGD, Adam, Adadelta, Adagrad, Nadam, RMSprop, schedules\n",
    "from tensorflow.keras.utils import normalize\n",
    "import tensorflow.keras.datasets as tfds\n",
    "import tensorflow.keras.initializers as tfi\n",
    "import tensorflow.keras.regularizers as tfr\n",
    "\n",
    "###--------\n",
    "# load data\n",
    "###--------\n",
    "\n",
    "(training_input, training_target), (test_input, test_target)  = tfds.mnist.load_data()\n",
    "\n",
    "# Reserve 10,000 samples for validation\n",
    "validation_input = training_input[-10000:]\n",
    "validation_target = training_target[-10000:]\n",
    "training_input = training_input[:-10000]\n",
    "training_target = training_target[:-10000]\n",
    "\n",
    "print(\"training input shape: %s, training target shape: %s\"  % (training_input.shape, training_target.shape))\n",
    "print(\"validation input shape: %s, validation target shape: %s\"  % (validation_input.shape, validation_target.shape))\n",
    "print(\"test input shape: %s, test target shape: %s\"  % (test_input.shape, test_target.shape))\n",
    "# range of input values: 0 ... 255\n",
    "print(\"\\n\")\n",
    "\n",
    "# plot some sample images\n",
    "num_examples = 2\n",
    "for s in range(num_examples):\n",
    "  print(\"Example image, true label: %d\" % training_target[s])\n",
    "  plt.imshow(training_input[s], vmin=0, vmax=255, cmap=plt.cm.gray)\n",
    "  plt.show()\n",
    "\n",
    "###-----------\n",
    "# process data\n",
    "###-----------\n",
    "\n",
    "# Note: shuffling is performed in fit method\n",
    "\n",
    "# scaling inputs from range 0 ... 255 to range [0,1] if desired\n",
    "scale_inputs = True # scale inputs to range [0,1]\n",
    "if scale_inputs:\n",
    "  training_input = training_input / 255\n",
    "  validation_input = validation_input / 255 \n",
    "  test_input = test_input / 255\n",
    "\n",
    "print(\"min. training data: %f\" % np.min(training_input))\n",
    "print(\"max. training data: %f\" % np.max(training_input))\n",
    "print(\"min. validation data: %f\" % np.min(validation_input))\n",
    "print(\"max. validation data: %f\" % np.max(validation_input))\n",
    "print(\"min. test data: %f\" % np.min(test_input))\n",
    "print(\"max. test data: %f\" % np.max(test_input))\n",
    "\n",
    "# histograms of input values\n",
    "nBins = 100\n",
    "fig, axes = plt.subplots(1, 3, figsize=(15,10))\n",
    "axes[0].hist(training_input.flatten(), nBins)\n",
    "axes[0].set_xlabel(\"training\")\n",
    "axes[0].set_ylabel(\"counts\")\n",
    "axes[0].set_ylim((0,1e6))\n",
    "\n",
    "axes[1].hist(validation_input.flatten(), nBins)\n",
    "axes[1].set_xlabel(\"validation\")\n",
    "axes[1].set_ylabel(\"counts\")\n",
    "axes[1].set_ylim((0,1e6))\n",
    "axes[1].set_title('historgrams of input values')\n",
    "\n",
    "axes[2].hist(test_input.flatten(), nBins)\n",
    "axes[2].set_xlabel(\"test\")\n",
    "axes[2].set_ylabel(\"counts\")\n",
    "axes[2].set_ylim((0,1e6))\n",
    "\n",
    "plt.show()\n",
    "\n",
    "# flatten inputs to vectors\n",
    "training_input = training_input.reshape(training_input.shape[0], training_input.shape[1] * training_input.shape[2])\n",
    "validation_input = validation_input.reshape(validation_input.shape[0], validation_input.shape[1] * validation_input.shape[2])\n",
    "test_input = test_input.reshape(test_input.shape[0], test_input.shape[1] * test_input.shape[2])\n",
    "print(training_input.shape)\n",
    "print(validation_input.shape)\n",
    "print(test_input.shape)\n",
    "\n",
    "num_classes = len(np.unique(training_target)) # FIX!!!\n",
    "\n",
    "###-----------\n",
    "# define model\n",
    "###-----------\n",
    "\n",
    "histories = {}\n",
    "opt_learning_rate = {}\n",
    "final_training_loss = {}\n",
    "final_training_accuracy = {}\n",
    "final_validation_loss = {}\n",
    "final_validation_accuracy = {}\n",
    "final_test_loss = {}\n",
    "final_test_accuracy = {}\n",
    "\n",
    "configurations = [\n",
    "        # FIX!!!\n",
    "        # ... \n",
    "     {'learningRates': [0.25], # numpy array, e.g. [0.1, 0.2]\n",
    "         'hiddenLayerSizes': [250], # as before\n",
    "         'solver': 'Adam',\n",
    "         'activation':'relu'},\n",
    "     {'learningRates': [0.15], # numpy array, e.g. [0.1, 0.2]\n",
    "         'hiddenLayerSizes': [200], # as before\n",
    "         'solver': 'Nadam',\n",
    "         'activation':'relu'},\n",
    "    {'learningRates': [0.15,0.17], # numpy array, e.g. [0.1, 0.2]\n",
    "         'hiddenLayerSizes': [100], # as before\n",
    "         'solver': 'RMSprop',\n",
    "         'activation':'relu'},\n",
    "    {'learningRates': [0.1,0.2], # numpy array, e.g. [0.1, 0.2]\n",
    "         'hiddenLayerSizes': [55,60], # as before\n",
    "         'solver': 'SGD',\n",
    "         'activation':'relu'},\n",
    "     {'learningRates': [0.35,0.37], # numpy array, e.g. [0.1, 0.2]\n",
    "         'hiddenLayerSizes': [50,30], # as before\n",
    "         'solver': 'Adadelta',\n",
    "         'activation':'relu'},\n",
    "     {'learningRates': [0.37,0.38], # numpy array, e.g. [0.1, 0.2]\n",
    "         'hiddenLayerSizes': [50,30], # as before\n",
    "         'solver': 'Adagrad',\n",
    "         'activation':'relu'},\n",
    "    \n",
    "    # activation of hidden layers\n",
    "         \n",
    "\n",
    "]\n",
    "\n",
    "learningRateSchedule = False # FIX!!! True: apply (exponential) learning rate schedule; False: constant learning rate\n",
    "dropout = 0.21 # FIX!!! 0 if no dropout, else fraction of dropout units (e.g. 0.2)   # FIX!!!\n",
    "batch_normalization = False # FIX!!!\n",
    "regularization_weight = 0.01 # FIX!!! 0 for no regularization or e.g. 0.01 to apply regularization\n",
    "regularizer = tfr.l1(l=regularization_weight) # or l2 or l1_l2; used for both weights and biases\n",
    "momentum = 0.9 # FIX!!! 0 or e.g. 0.9, 0.99; ONLY FOR STOCHASTIC GRADIENT DESCENT AND RMSPROP\n",
    "nesterov = True # FIX!!! ONLY FOR STOCHASTIC GRADIENT DESCENT\n",
    "\n",
    "numRepetitions = 4 # FIX!!! repetitions of experiment due to stochastic nature\n",
    "\n",
    "num_inputs = training_input.shape[1] \n",
    "num_outputs = num_classes \n",
    "\n",
    "idx_config = 0\n",
    "\n",
    "for config in configurations:\n",
    "  print(\"=======\")\n",
    "  print(\"Now running tests for config\", config)\n",
    "\n",
    "  learningRates = config['learningRates']\n",
    "  num_hidden = config['hiddenLayerSizes']\n",
    "  solver = config['solver']\n",
    "  activation = config['activation']\n",
    "\n",
    "  # Sequential network structure.\n",
    "  model = Sequential()\n",
    "\n",
    "  if len(num_hidden) == 0:\n",
    "    print(\"Error: Must at least have one hidden layer!\")\n",
    "    sys.exit()  \n",
    "\n",
    "  # add first hidden layer connecting to input layer\n",
    "  model.add(Dense(num_hidden[0], input_dim=num_inputs, activation=activation, kernel_regularizer=regularizer, bias_regularizer=regularizer))\n",
    "\n",
    "#  if dropout: # dropout at input layer is generally not recommended\n",
    "#    # dropout of fraction dropout of the neurons and activation layer.\n",
    "#    model.add(Dropout(dropout))\n",
    "#  #  model.add(Activation(\"linear\"))\n",
    "\n",
    "  if batch_normalization:\n",
    "    model.add(BatchNormalization())\n",
    "\n",
    "  # potentially further hidden layers\n",
    "  for i in range(1, len(num_hidden)):\n",
    "    # add hidden layer with len[i] neurons\n",
    "    model.add(Dense(num_hidden[i], activation=activation, kernel_regularizer=regularizer, bias_regularizer=regularizer))\n",
    "  #  model.add(Activation(\"linear\"))\n",
    "\n",
    "    if dropout:\n",
    "    # dropout of fraction dropout of the neurons and activation layer.\n",
    "      model.add(Dropout(dropout))\n",
    "    #  model.add(Activation(\"linear\"))\n",
    "\n",
    "    if batch_normalization:\n",
    "      model.add(BatchNormalization())  \n",
    "\n",
    "  # output layer\n",
    "  model.add(Dense(units=num_outputs, name = \"output\", kernel_regularizer=regularizer, bias_regularizer=regularizer))\n",
    "\n",
    "  if dropout:\n",
    "  # dropout of fraction dropout of the neurons and activation layer.\n",
    "    model.add(Dropout(dropout))\n",
    "  #  model.add(Activation(\"linear\"))    \n",
    "    \n",
    "  # print configuration\n",
    "  print(\"\\nModel configuration: \")\n",
    "  print(model.get_config())\n",
    "  print(\"\\n\")\n",
    "\n",
    "  # show how the model looks\n",
    "  model.summary()\n",
    "\n",
    "  optLearningRate = 0\n",
    "  optValidationAccuracy = 0\n",
    "\n",
    "  histories_lr = [] # remember history for each learning rate\n",
    "\n",
    "  for idx_lr in range(len(learningRates)):\n",
    "  \n",
    "    print(\"MODIFYING LEARNING RATE\")\n",
    "    learningRate = learningRates[idx_lr]\n",
    "    if learningRateSchedule == True:\n",
    "      lr_schedule = schedules.ExponentialDecay(initial_learning_rate = learningRate, decay_steps=100000, decay_rate=0.96, staircase=True) # or PiecewiseConstantDecay or PolynomialDecay or InverseTimeDecay \n",
    "      print(\"... applying exponential decay learning rate schedule with initial learning rate %f\" % learningRate)\n",
    "    else:\n",
    "      lr_schedule = learningRate # constant learning rate\n",
    "      print(\"... constant learning rate %f\" % learningRate)\n",
    "\n",
    "    train_loss = np.zeros(numRepetitions)\n",
    "    train_acc = np.zeros(numRepetitions)\n",
    "    val_loss = np.zeros(numRepetitions)\n",
    "    val_acc = np.zeros(numRepetitions)\n",
    "    test_loss = np.zeros(numRepetitions)\n",
    "    test_acc = np.zeros(numRepetitions)\n",
    "\n",
    "    histories_rep = [] # (temporarily) remember history of each repetition\n",
    "    for idx_rep in range(numRepetitions):\n",
    "      print(\"\\nIteration %d...\" % idx_rep)  \n",
    "      \n",
    "      # compile model\n",
    "      if solver == 'SGD':        \n",
    "        opt = SGD(learning_rate=lr_schedule, momentum=momentum, nesterov=nesterov) # SGD or Adam, Nadam, Adadelta, Adagrad, RMSProp, potentially setting more parameters\n",
    "      elif solver == 'Adam':\n",
    "        opt = Adam(learning_rate=lr_schedule) \n",
    "      elif solver == 'Nadam':\n",
    "        opt = Nadam(learning_rate=lr_schedule) # Nadam doesn't support adaptive learning rate schedule!\n",
    "      elif solver == 'Adadelta':\n",
    "        opt = Adadelta(learning_rate=lr_schedule) \n",
    "      elif solver == 'Adagrad':\n",
    "        opt = Adagrad(learning_rate=lr_schedule) \n",
    "      elif solver == 'RMSprop':\n",
    "        opt = RMSprop(learning_rate=lr_schedule, momentum = momentum)\n",
    "      model.compile(optimizer=opt,loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),metrics=['sparse_categorical_accuracy'])\n",
    "\n",
    "      # Training model with train data. Fixed random seed:\n",
    "      num_epochs = 100 # FIX !!!\n",
    "      batch_size = 1000 # FIX !!! \n",
    "      history = model.fit(training_input, training_target, epochs=num_epochs, batch_size=batch_size, shuffle=\"True\", verbose=2)\n",
    "      histories_rep.append(history) # remember all histories from all repetitions\n",
    "      train_loss[idx_rep] = history.history['loss'][num_epochs-1] \n",
    "      train_acc[idx_rep] = history.history['sparse_categorical_accuracy'][num_epochs-1]\n",
    "      val_loss[idx_rep] = model.evaluate(validation_input, validation_target)[0]\n",
    "      val_acc[idx_rep] = model.evaluate(validation_input, validation_target)[1]\n",
    "      test_loss[idx_rep] = model.evaluate(test_input, test_target)[0]\n",
    "      test_acc[idx_rep] = model.evaluate(test_input, test_target)[1]\n",
    "\n",
    "    # print results:\n",
    "    print(\"training loss (in brackets: mean +/- std):\")\n",
    "    for i in range(numRepetitions):\n",
    "        print(\"%f\" % train_loss[i])\n",
    "    print(\"(%f +/- %f)\\n\" % (np.mean(train_loss), np.std(train_loss, ddof=1)))\n",
    "\n",
    "    print(\"training accuracy (in brackets: mean +/- std):\")\n",
    "    for i in range(numRepetitions):\n",
    "        print(\"%f\" % train_acc[i])\n",
    "    print(\"(%f +/- %f)\\n\" % (np.mean(train_acc), np.std(train_acc, ddof=1)))\n",
    "\n",
    "    print(\"validation loss (in brackets: mean +/- std):\")\n",
    "    for i in range(numRepetitions):\n",
    "        print(\"%f\" % val_loss[i])\n",
    "    print(\"(%f +/- %f)\\n\" % (np.mean(val_loss), np.std(val_loss, ddof=1)))\n",
    "\n",
    "    print(\"validation accuracy (in brackets: mean +/- std):\")\n",
    "    for i in range(numRepetitions):\n",
    "        print(\"%f\" % val_acc[i])\n",
    "    print(\"(%f +/- %f)\\n\" % (np.mean(val_acc), np.std(val_acc, ddof=1)))\n",
    "\n",
    "    print(\"test loss (in brackets: mean +/- std):\")\n",
    "    for i in range(numRepetitions):\n",
    "        print(\"%f\" % test_loss[i])\n",
    "    print(\"(%f +/- %f)\\n\" % (np.mean(test_loss), np.std(test_loss, ddof=1)))\n",
    "\n",
    "    print(\"test accuracy (in brackets: mean +/- std):\")\n",
    "    for i in range(numRepetitions):\n",
    "        print(\"%f\" % test_acc[i])\n",
    "    print(\"(%f +/- %f)\\n\" % (np.mean(test_acc), np.std(test_acc, ddof=1)))\n",
    "\n",
    "    # remember history of best repetition (based on maximal validation accuracy)\n",
    "    idx_best_rep = np.argmax(val_acc)\n",
    "\n",
    "    # plot training loss and accuracy for best repetition\n",
    "    print(\"\\nbest repetition: experiment %d\" % idx_best_rep)\n",
    "    plt.plot(histories_rep[idx_best_rep].history['loss'], color = 'blue', \n",
    "                  label = 'training loss')\n",
    "    plt.plot(histories_rep[idx_best_rep].history['sparse_categorical_accuracy'], color = 'red', \n",
    "                  label = 'traning accuracy')\n",
    "    plt.xlabel('Epoch number')\n",
    "    plt.ylim(0, 1)\n",
    "    plt.legend()\n",
    "    plt.show()\n",
    "\n",
    "    # determine optimal learning rate (based on mean validation accuracy over repetitions)\n",
    "    if np.mean(val_acc) > optValidationAccuracy:\n",
    "        optValidationAccuracy = np.mean(val_acc)\n",
    "        opt_learning_rate[idx_config] = learningRate  \n",
    "        # remember history\n",
    "        histories[idx_config] = histories_rep[idx_best_rep]\n",
    "        # remember evaluation results\n",
    "        final_training_loss[idx_config] = train_loss[idx_best_rep]\n",
    "        final_training_accuracy[idx_config] = train_acc[idx_best_rep]\n",
    "        final_validation_loss[idx_config] = val_loss[idx_best_rep]\n",
    "        final_validation_accuracy[idx_config] = val_acc[idx_best_rep]\n",
    "        final_test_loss[idx_config] = test_loss[idx_best_rep]\n",
    "        final_test_accuracy[idx_config] = test_acc[idx_best_rep]   \n",
    "\n",
    "  print(\"\\n\\noptimal learning rate for this configuration: %f\\n\\n\" % opt_learning_rate[idx_config])\n",
    "\n",
    "  # print evaluation results\n",
    "  print(\"\\nconfiguration %s:\\n\" % configurations[idx_config])\n",
    "  print(\"optimal learning rate: %f\" % opt_learning_rate[idx_config])\n",
    "  print(\"final training loss: %f\" % final_training_loss[idx_config])\n",
    "  print(\"final training accuracy: %f\" % final_training_accuracy[idx_config])\n",
    "  print(\"final validation loss: %f\" % final_validation_loss[idx_config])\n",
    "  print(\"final validation accuracy: %f\" % final_validation_accuracy[idx_config])\n",
    "  print(\"final test loss: %f\" % final_test_loss[idx_config])\n",
    "  print(\"final test accuracy: %f\" % final_test_accuracy[idx_config])\n",
    "\n",
    "  # increment configuration index\n",
    "  idx_config = idx_config + 1\n",
    "\n",
    "###--------------------------------\n",
    "# Summary: print evaluation results\n",
    "###--------------------------------\n",
    "\n",
    "print(\"\\n\\nSummary:\\n\\n\")\n",
    "for i in range(len(configurations)): \n",
    "  print(\"\\nconfiguration %s:\\n\" % configurations[i])\n",
    "  print(\"optimal learning rate: %f\" % opt_learning_rate[i])\n",
    "  print(\"final training loss: %f\" % final_training_loss[i])\n",
    "  print(\"final training accuracy: %f\" % final_training_accuracy[i])\n",
    "  print(\"final validation loss: %f\" % final_validation_loss[i])\n",
    "  print(\"final validation accuracy: %f\" % final_validation_accuracy[i])\n",
    "  print(\"final test loss: %f\" % final_test_loss[i])\n",
    "  print(\"final test accuracy: %f\" % final_test_accuracy[i])\n",
    "\n",
    "###--------------------\n",
    "# Summary: plot results\n",
    "###--------------------\n",
    " \n",
    "# plot setup\n",
    "num_rows = np.int(np.ceil(len(configurations)/2))\n",
    "fig, axes = plt.subplots(num_rows, 2, figsize=(15, 10))\n",
    "fig.tight_layout() # improve spacing between subplots, doesn't work\n",
    "plt.subplots_adjust(left=0.125, right=0.9, bottom=0.1, top=0.9, wspace=0.2, hspace=0.2) # doesn't work\n",
    "legend = []\n",
    "i = 0\n",
    "axes_indices = {}\n",
    "\n",
    "if (len(configurations) <= 2):\n",
    "  for i in range(len(configurations)):\n",
    "    axes_indices[i] = i\n",
    "else:\n",
    "  for i in range(num_rows):\n",
    "    axes_indices[2*i] = (i, 0)\n",
    "    axes_indices[2*i+1] = (i, 1)\n",
    "\n",
    "for i in range(len(configurations)):\n",
    "  # plot loss    \n",
    "  axes[axes_indices[i]].set_title('configuration ' + str(i))\n",
    "  if i == 8 or i == 9:  \n",
    "    axes[axes_indices[i]].set_xlabel('Epoch number')\n",
    "  axes[axes_indices[i]].set_ylim(0, 1)\n",
    "  axes[axes_indices[i]].plot(histories[i].history['loss'], color = 'blue', \n",
    "              label = 'training loss')\n",
    "  axes[axes_indices[i]].plot(histories[i].history['sparse_categorical_accuracy'], color = 'red', \n",
    "              label = 'traning accuracy')\n",
    "  axes[axes_indices[i]].legend()\n",
    "\n",
    "  i = i + 1\n",
    "\n",
    "\n",
    "# show the plot\n",
    "plt.show()"
   ]
  },
  {
   "attachments": {
    "1.png": {
     "image/png": ""
    },
    "2.png": {
     "image/png": ""
    },
    "3.png": {
     "image/png": ""
    },
    "4.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Answer\n",
    "\n",
    "### FINDINGS OF Experiment 1:\n",
    "![1.png](attachment:1.png)\n",
    "\n",
    "configuration {'learningRates': [0.1, 0.11, 0.12], 'hiddenLayerSizes': [50, 30], 'solver': 'SGD', 'activation': 'relu'}:\n",
    "\n",
    "optimal learning rate: 0.100000\n",
    "\n",
    "final training loss: 2.422811\n",
    "\n",
    "final training accuracy: 0.570800\n",
    "\n",
    "final validation loss: 1.858070\n",
    "\n",
    "final validation accuracy: 0.817100\n",
    "\n",
    "final test loss: 1.862645\n",
    "\n",
    "final test accuracy: 0.805600\n",
    "\n",
    "configuration {'learningRates': [0.1, 0.11, 0.12], 'hiddenLayerSizes': [50, 30], 'solver': 'Adam', 'activation': 'relu'}:\n",
    "\n",
    "optimal learning rate: 0.100000\n",
    "\n",
    "final training loss: 6.640169\n",
    "\n",
    "final training accuracy: 0.183700\n",
    "\n",
    "final validation loss: 6.615485\n",
    "\n",
    "final validation accuracy: 0.234500\n",
    "\n",
    "final test loss: 6.612063\n",
    "\n",
    "final test accuracy: 0.237500\n",
    "\n",
    "configuration {'learningRates': [0.1, 0.11, 0.12], 'hiddenLayerSizes': [50, 30], 'solver': 'Nadam', 'activation': 'relu'}:\n",
    "\n",
    "optimal learning rate: 0.100000\n",
    "\n",
    "final training loss: 9.630845\n",
    "\n",
    "final training accuracy: 0.105800\n",
    "\n",
    "final validation loss: 6.954296\n",
    "\n",
    "final validation accuracy: 0.109000\n",
    "\n",
    "final test loss: 6.954338\n",
    "\n",
    "final test accuracy: 0.102800\n",
    "\n",
    "configuration {'learningRates': [0.1, 0.11, 0.12], 'hiddenLayerSizes': [50, 30], 'solver': 'Adadelta', 'activation': 'relu'}:\n",
    "\n",
    "optimal learning rate: 0.120000\n",
    "\n",
    "final training loss: 1.973515\n",
    "\n",
    "final training accuracy: 0.611920\n",
    "\n",
    "final validation loss: 1.622954\n",
    "\n",
    "final validation accuracy: 0.837400\n",
    "\n",
    "final test loss: 1.616173\n",
    "\n",
    "final test accuracy: 0.835000\n",
    "\n",
    "configuration {'learningRates': [0.1, 0.11, 0.12], 'hiddenLayerSizes': [50, 30], 'solver': 'Adagrad', 'activation': 'relu'}:\n",
    "\n",
    "optimal learning rate: 0.110000\n",
    "\n",
    "final training loss: 2.136097\n",
    "\n",
    "final training accuracy: 0.616440\n",
    "\n",
    "final validation loss: 1.633894\n",
    "\n",
    "final validation accuracy: 0.831900\n",
    "\n",
    "final test loss: 1.631751\n",
    "\n",
    "final test accuracy: 0.824400\n",
    "\n",
    "configuration {'learningRates': [0.1, 0.11, 0.12], 'hiddenLayerSizes': [50, 30], 'solver': 'RMSprop', 'activation': 'relu'}:\n",
    "\n",
    "optimal learning rate: 0.110000\n",
    "\n",
    "final training loss: 129.548080\n",
    "\n",
    "final training accuracy: 0.102080\n",
    "\n",
    "final validation loss: 83.609398\n",
    "\n",
    "final validation accuracy: 0.176700\n",
    "\n",
    "final test loss: 83.630838\n",
    "\n",
    "final test accuracy: 0.161900\n",
    "\n",
    "### FINDINGS OF EXPERIMENT 2: \n",
    "![2.png](attachment:2.png)\n",
    "\n",
    "configuration {'learningRates': [0.1, 0.2], 'hiddenLayerSizes': [55, 60], 'solver': 'SGD', 'activation': 'relu'}:\n",
    "\n",
    "optimal learning rate: 0.100000\n",
    "\n",
    "final training loss: 1.068864\n",
    "\n",
    "final training accuracy: 0.786400\n",
    "\n",
    "final validation loss: 0.772645\n",
    "\n",
    "final validation accuracy: 0.929800\n",
    "\n",
    "final test loss: 0.778956\n",
    "\n",
    "final test accuracy: 0.925200\n",
    "\n",
    "configuration {'learningRates': [0.2, 0.3], 'hiddenLayerSizes': [55, 60], 'solver': 'Adam', 'activation': 'relu'}:\n",
    "\n",
    "optimal learning rate: 0.200000\n",
    "\n",
    "final training loss: 11.740863\n",
    "\n",
    "final training accuracy: 0.134800\n",
    "\n",
    "final validation loss: 10.985705\n",
    "\n",
    "final validation accuracy: 0.140900\n",
    "\n",
    "final test loss: 10.985461\n",
    "\n",
    "final test accuracy: 0.150000\n",
    "\n",
    "configuration {'learningRates': [0.3, 0.31], 'hiddenLayerSizes': [50, 30], 'solver': 'Nadam', 'activation': 'relu'}:\n",
    "\n",
    "\n",
    "optimal learning rate: 0.300000\n",
    "\n",
    "final training loss: 56.724408\n",
    "\n",
    "final training accuracy: 0.109160\n",
    "\n",
    "final validation loss: 33.763234\n",
    "\n",
    "final validation accuracy: 0.106400\n",
    "\n",
    "final test loss: 33.761829\n",
    "\n",
    "final test accuracy: 0.113500\n",
    "\n",
    "configuration {'learningRates': [0.35, 0.37], 'hiddenLayerSizes': [50, 30], 'solver': 'Adadelta', 'activation': 'relu'}:\n",
    "\n",
    "optimal learning rate: 0.370000\n",
    "\n",
    "final training loss: 1.096682\n",
    "\n",
    "final training accuracy: 0.777400\n",
    "\n",
    "final validation loss: 0.782862\n",
    "\n",
    "final validation accuracy: 0.931700\n",
    "\n",
    "final test loss: 0.788440\n",
    "\n",
    "final test accuracy: 0.926000\n",
    "\n",
    "configuration {'learningRates': [0.37, 0.38], 'hiddenLayerSizes': [50, 30], 'solver': 'Adagrad', 'activation': 'relu'}:\n",
    "\n",
    "\n",
    "optimal learning rate: 0.370000\n",
    "\n",
    "final training loss: 1.146591\n",
    "\n",
    "final training accuracy: 0.761480\n",
    "\n",
    "final validation loss: 0.831216\n",
    "\n",
    "final validation accuracy: 0.914600\n",
    "\n",
    "final test loss: 0.838594\n",
    "\n",
    "final test accuracy: 0.909600\n",
    "\n",
    "configuration {'learningRates': [0.39, 0.4], 'hiddenLayerSizes': [50, 30], 'solver': 'RMSprop', 'activation': 'relu'}:\n",
    "\n",
    "optimal learning rate: 0.400000\n",
    "\n",
    "final training loss: 1570.586729\n",
    "\n",
    "final training accuracy: 0.100360\n",
    "\n",
    "final validation loss: 1333.120870\n",
    "\n",
    "final validation accuracy: 0.129100\n",
    "\n",
    "final test loss: 1347.978428\n",
    "\n",
    "final test accuracy: 0.112300\n",
    "\n",
    "### FINDINGS OF EXPERIMENT 3:\n",
    "\n",
    "![3.png](attachment:3.png)\n",
    "\n",
    "configuration {'learningRates': [0.25], 'hiddenLayerSizes': [300, 200, 30], 'solver': 'Adam', 'activation': 'relu'}:\n",
    "\n",
    "optimal learning rate: 0.250000\n",
    "\n",
    "final training loss: 107.403180\n",
    "\n",
    "final training accuracy: 0.103360\n",
    "\n",
    "final validation loss: 106.208815\n",
    "\n",
    "final validation accuracy: 0.125800\n",
    "\n",
    "final test loss: 106.209188\n",
    "\n",
    "final test accuracy: 0.119200\n",
    "\n",
    "configuration {'learningRates': [0.15], 'hiddenLayerSizes': [300, 200, 30], 'solver': 'Nadam', 'activation': 'relu'}:\n",
    "\n",
    "optimal learning rate: 0.150000\n",
    "\n",
    "final training loss: 81.041597\n",
    "\n",
    "final training accuracy: 0.107560\n",
    "\n",
    "final validation loss: 64.303141\n",
    "\n",
    "final validation accuracy: 0.109000\n",
    "\n",
    "final test loss: 64.303326\n",
    "\n",
    "final test accuracy: 0.102800\n",
    "\n",
    "\n",
    "configuration {'learningRates': [0.15, 0.17], 'hiddenLayerSizes': [100, 70, 30], 'solver': 'RMSprop', 'activation': 'relu'}:\n",
    "\n",
    "optimal learning rate: 0.150000\n",
    "\n",
    "final training loss: 210.109740\n",
    "\n",
    "final training accuracy: 0.100480\n",
    "\n",
    "final validation loss: 187.408234\n",
    "\n",
    "final validation accuracy: 0.099100\n",
    "\n",
    "final test loss: 187.408264\n",
    "\n",
    "final test accuracy: 0.098000\n",
    "\n",
    "configuration {'learningRates': [0.1, 0.2], 'hiddenLayerSizes': [55, 60], 'solver': 'SGD', 'activation': 'relu'}:\n",
    "\n",
    "optimal learning rate: 0.100000\n",
    "\n",
    "final training loss: 2.494765\n",
    "\n",
    "final training accuracy: 0.556440\n",
    "\n",
    "final validation loss: 1.925437\n",
    "\n",
    "final validation accuracy: 0.774300\n",
    "\n",
    "final test loss: 1.928001\n",
    "\n",
    "final test accuracy: 0.763800\n",
    "\n",
    "configuration {'learningRates': [0.35, 0.37], 'hiddenLayerSizes': [50, 30], 'solver': 'Adadelta', 'activation': 'relu'}:\n",
    "\n",
    "optimal learning rate: 0.370000\n",
    "\n",
    "final training loss: 2.205468\n",
    "\n",
    "final training accuracy: 0.602980\n",
    "\n",
    "final validation loss: 1.838857\n",
    "\n",
    "final validation accuracy: 0.825900\n",
    "\n",
    "final test loss: 1.843558\n",
    "\n",
    "final test accuracy: 0.811300\n",
    "\n",
    "configuration {'learningRates': [0.37, 0.38], 'hiddenLayerSizes': [50, 30], 'solver': 'Adagrad', 'activation': 'relu'}:\n",
    "\n",
    "optimal learning rate: 0.370000\n",
    "\n",
    "final training loss: 3.172650\n",
    "\n",
    "final training accuracy: 0.203840\n",
    "\n",
    "final validation loss: 3.133374\n",
    "\n",
    "final validation accuracy: 0.259400\n",
    "\n",
    "final test loss: 3.127857\n",
    "\n",
    "final test accuracy: 0.264900\n",
    "\n",
    "### FINDINGS OF EXPERIMENT 4:\n",
    "\n",
    "![4.png](attachment:4.png)\n",
    "\n",
    "configuration {'learningRates': [0.25], 'hiddenLayerSizes': [300, 200, 30], 'solver': 'Adam', 'activation': 'relu'}:\n",
    "\n",
    "\n",
    "optimal learning rate: 0.250000\n",
    "\n",
    "final training loss: 54.234446\n",
    "\n",
    "final training accuracy: 0.104540\n",
    "\n",
    "final validation loss: 31.805575\n",
    "\n",
    "final validation accuracy: 0.181600\n",
    "\n",
    "final test loss: 31.804397\n",
    "\n",
    "final test accuracy: 0.186000\n",
    "\n",
    "configuration {'learningRates': [0.15], 'hiddenLayerSizes': [300, 200, 30], 'solver': 'Nadam', 'activation': 'relu'}:\n",
    "\n",
    "optimal learning rate: 0.150000\n",
    "\n",
    "final training loss: 102.505118\n",
    "\n",
    "final training accuracy: 0.109700\n",
    "\n",
    "final validation loss: 74.141925\n",
    "\n",
    "final validation accuracy: 0.106400\n",
    "\n",
    "final test loss: 74.141266\n",
    "\n",
    "final test accuracy: 0.113500\n",
    "\n",
    "configuration {'learningRates': [0.15, 0.17], 'hiddenLayerSizes': [100, 70, 30], 'solver': 'RMSprop', 'activation': 'relu'}:\n",
    "\n",
    "optimal learning rate: 0.150000\n",
    "\n",
    "final training loss: 122.977712\n",
    "\n",
    "final training accuracy: 0.101700\n",
    "\n",
    "final validation loss: 144.287500\n",
    "\n",
    "final validation accuracy: 0.109000\n",
    "\n",
    "final test loss: 144.290932\n",
    "\n",
    "final test accuracy: 0.102800\n",
    "\n",
    "configuration {'learningRates': [0.1, 0.2], 'hiddenLayerSizes': [55, 60], 'solver': 'SGD', 'activation': 'relu'}:\n",
    "\n",
    "optimal learning rate: 0.100000\n",
    "\n",
    "final training loss: 1.068421\n",
    "\n",
    "final training accuracy: 0.785920\n",
    "\n",
    "final validation loss: 0.773372\n",
    "\n",
    "final validation accuracy: 0.931600\n",
    "\n",
    "final test loss: 0.781418\n",
    "\n",
    "final test accuracy: 0.926200\n",
    "\n",
    "configuration {'learningRates': [0.35, 0.37], 'hiddenLayerSizes': [50, 30], 'solver': 'Adadelta', 'activation': 'relu'}:\n",
    "\n",
    "optimal learning rate: 0.350000\n",
    "\n",
    "final training loss: 1.101753\n",
    "\n",
    "final training accuracy: 0.780000\n",
    "\n",
    "final validation loss: 0.786466\n",
    "\n",
    "final validation accuracy: 0.931700\n",
    "\n",
    "final test loss: 0.791812\n",
    "\n",
    "final test accuracy: 0.926200\n",
    "\n",
    "configuration {'learningRates': [0.37, 0.38], 'hiddenLayerSizes': [50, 30], 'solver': 'Adagrad', 'activation': 'relu'}:\n",
    "\n",
    "optimal learning rate: 0.370000\n",
    "\n",
    "final training loss: 1.154554\n",
    "\n",
    "final training accuracy: 0.760640\n",
    "\n",
    "final validation loss: 0.817311\n",
    "\n",
    "final validation accuracy: 0.921500\n",
    "\n",
    "final test loss: 0.823596\n",
    "\n",
    "final test accuracy: 0.917200\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# Exercise 4 (Vanishing gradient)\n",
    "\n",
    "a)\tThe Jupyter notebook implements a multi-layer perceptron for use on the MNIST digit classification problem. Apart from the training loss and accuracy, it also displays a histogram of the weights (between the input and the first hidden layer) after initialization and at the end of the training, and visualizes the weights (between the input layer and 16 hidden neurons of the first hidden layer). Using a sigmoid activation function, compare the output for a single hidden layer, five and six hidden layers. Then change to a ReLU activation function and inspect the results for six hidden layers. Discuss your findings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from os.path import join\n",
    "from tensorflow.keras.layers import Dense, Dropout, Activation, BatchNormalization\n",
    "from tensorflow.keras import Model, Input, Sequential\n",
    "from tensorflow.keras.optimizers import SGD, Adam, Adadelta, Adagrad, Nadam, RMSprop, schedules\n",
    "from tensorflow.keras.utils import normalize\n",
    "import tensorflow.keras.datasets as tfds\n",
    "import tensorflow.keras.initializers as tfi\n",
    "import tensorflow.keras.regularizers as tfr\n",
    "\n",
    "###--------\n",
    "# load data\n",
    "###--------\n",
    "\n",
    "(training_input, training_target), (test_input, test_target)  = tfds.mnist.load_data()\n",
    "\n",
    "# Reserve 10,000 samples for validation\n",
    "validation_input = training_input[-10000:]\n",
    "validation_target = training_target[-10000:]\n",
    "training_input = training_input[:-10000]\n",
    "training_target = training_target[:-10000]\n",
    "\n",
    "print(\"training input shape: %s, training target shape: %s\"  % (training_input.shape, training_target.shape))\n",
    "print(\"validation input shape: %s, validation target shape: %s\"  % (validation_input.shape, validation_target.shape))\n",
    "print(\"test input shape: %s, test target shape: %s\"  % (test_input.shape, test_target.shape))\n",
    "# range of input values: 0 ... 255\n",
    "print(\"\\n\")\n",
    "\n",
    "###-----------\n",
    "# process data\n",
    "###-----------\n",
    "\n",
    "# Note: shuffling is performed in fit method\n",
    "\n",
    "# scaling inputs from range 0 ... 255 to range [0,1] if desired\n",
    "scale_inputs = True # scale inputs to range [0,1]\n",
    "if scale_inputs:\n",
    "  training_input = training_input / 255\n",
    "  validation_input = validation_input / 255 \n",
    "  test_input = test_input / 255\n",
    "\n",
    "# flatten inputs to vectors\n",
    "training_input = training_input.reshape(training_input.shape[0], training_input.shape[1] * training_input.shape[2])\n",
    "validation_input = validation_input.reshape(validation_input.shape[0], validation_input.shape[1] * validation_input.shape[2])\n",
    "test_input = test_input.reshape(test_input.shape[0], test_input.shape[1] * test_input.shape[2])\n",
    "print(training_input.shape)\n",
    "print(validation_input.shape)\n",
    "print(test_input.shape)\n",
    "\n",
    "num_classes = 10 # 10 digits\n",
    "\n",
    "###-----------\n",
    "# define model\n",
    "###-----------\n",
    "\n",
    "num_inputs = training_input.shape[1] \n",
    "num_hidden = [15,25,50,75,100,150] # FIX!!! \n",
    "num_outputs = num_classes \n",
    "\n",
    "initialLearningRate = 0.01 # FIX!!!\n",
    "# select constant learning rate or (flexible) learning rate schedule,\n",
    "# i.e. select one of the following two alternatives\n",
    "lr_schedule = initialLearningRate # constant learning rate\n",
    "# lr_schedule = schedules.ExponentialDecay(initial_learning_rate = initialLearningRate, decay_steps=100000, decay_rate=0.96, staircase=True) # or PiecewiseConstantDecay or PolynomialDecay or InverseTimeDecay \n",
    "\n",
    "solver = 'SGD'\n",
    "activation = 'relu' # FIX!!! e.g. sigmoid or relu\n",
    "dropout = 0 # 0 if no dropout, else fraction of dropout units (e.g. 0.2)   # FIX!!!\n",
    "batch_normalization = False\n",
    "\n",
    "weight_init = tfi.glorot_uniform() # FIX!!! default: glorot_uniform(); e.g. glorot_normal(), he_normal(), he_uniform(), lecun_normal(), lecun_uniform(), RandomNormal(), RandomUniform(), Zeros() etc.\n",
    "bias_init = tfi.Zeros() # FIX!!! default: Zeros(); for some possible values see weight initializers\n",
    "\n",
    "regularization_weight = 0.0 # 0 for no regularization or e.g. 0.01 to apply regularization\n",
    "regularizer = tfr.l1(l=regularization_weight) # or l2 or l1_l2; used for both weights and biases\n",
    "\n",
    "num_epochs = 30 # FIX !!!\n",
    "batch_size = 2 # FIX !!! \n",
    "\n",
    "# Sequential network structure.\n",
    "model = Sequential()\n",
    "\n",
    "if len(num_hidden) == 0:\n",
    "  print(\"Error: Must at least have one hidden layer!\")\n",
    "  sys.exit()  \n",
    "\n",
    "# add first hidden layer connecting to input layer\n",
    "\n",
    "model.add(Dense(num_hidden[0], input_dim=num_inputs, activation=activation, kernel_initializer=weight_init, bias_initializer = bias_init, kernel_regularizer=regularizer, bias_regularizer=regularizer))\n",
    "\n",
    "# if dropout: # dropout at input layer is generally not recommended\n",
    "#  # dropout of fraction dropout of the neurons and activation layer.\n",
    "#  model.add(Dropout(dropout))\n",
    "# #  model.add(Activation(\"linear\"))\n",
    "\n",
    "if batch_normalization:\n",
    "  model.add(BatchNormalization())\n",
    "\n",
    "# potentially further hidden layers\n",
    "for i in range(1, len(num_hidden)):\n",
    "  # add hidden layer with len[i] neurons\n",
    "  model.add(Dense(num_hidden[i], activation=activation, kernel_initializer=weight_init, bias_initializer = bias_init, kernel_regularizer=regularizer, bias_regularizer=regularizer))\n",
    "#  model.add(Activation(\"linear\"))\n",
    "  \n",
    "  if dropout:\n",
    "  # dropout of fraction dropout of the neurons and activation layer.\n",
    "    model.add(Dropout(dropout))\n",
    "  #  model.add(Activation(\"linear\"))\n",
    "\n",
    "  if batch_normalization:\n",
    "    model.add(BatchNormalization())  \n",
    "\n",
    "# output layer\n",
    "model.add(Dense(units=num_outputs, name = \"output\", kernel_initializer=weight_init, bias_initializer = bias_init, kernel_regularizer=regularizer, bias_regularizer=regularizer))\n",
    "\n",
    "if dropout:\n",
    "# dropout of fraction dropout of the neurons and activation layer.\n",
    "  model.add(Dropout(dropout))\n",
    "#  model.add(Activation(\"linear\"))\n",
    "  \n",
    "# print configuration\n",
    "print(\"\\nModel configuration: \")\n",
    "print(model.get_config())\n",
    "print(\"\\n\")\n",
    "print(\"... number of layers: %d\" % len(model.layers))\n",
    "\n",
    "# show how the model looks\n",
    "model.summary()\n",
    "      \n",
    "# compile model\n",
    "if solver == 'SGD':\n",
    "  momentum = 0 # e.g. 0.0, 0.5, 0.9 or 0.99\n",
    "  nesterov = False\n",
    "  opt = SGD(learning_rate=lr_schedule, momentum=momentum, nesterov=nesterov) # SGD or Adam, Nadam, Adadelta, Adagrad, RMSProp, potentially setting more parameters\n",
    "elif solver == 'Adam':\n",
    "  opt = Adam(learning_rate=lr_schedule)\n",
    "elif solver == 'Nadam':\n",
    "  opt = Adam(learning_rate=lr_schedule)\n",
    "elif solver == 'Adadelta':\n",
    "  opt = Adam(learning_rate=lr_schedule)\n",
    "elif solver == 'Adagrad':\n",
    "  opt = Adam(learning_rate=lr_schedule)\n",
    "elif solver == 'RMSprop':\n",
    "  opt = RMSprop(learning_rate=lr_schedule)\n",
    "model.compile(optimizer=opt,loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),metrics=['sparse_categorical_accuracy'])\n",
    "\n",
    "# histogram of weights (first layer) after initialization\n",
    "weights = model.layers[0].get_weights()[0]\n",
    "biases = model.layers[0].get_weights()[1]\n",
    "\n",
    "nBins = 100\n",
    "fig, axes = plt.subplots(1, 2, figsize=(15,10))\n",
    "axes[0].hist(weights.flatten(), nBins)\n",
    "axes[0].set_xlabel(\"weights\")\n",
    "axes[0].set_ylabel(\"counts\")\n",
    "axes[0].set_title(\"weight histogram after initialization\")\n",
    "\n",
    "axes[1].hist(biases.flatten(), nBins)\n",
    "axes[1].set_xlabel(\"biases\")\n",
    "axes[1].set_ylabel(\"counts\")\n",
    "axes[1].set_title(\"bias histogram after initialization\")\n",
    "plt.show()\n",
    "\n",
    "# visualize the weights between input layer and some \n",
    "# of the hidden neurons of the first hidden layer after initialization\n",
    "# model.layers[0].get_weights()[0] is a (784 x numHiddenNeurons) array\n",
    "# model.layers[0].get_weights()[0].T (transpose) is a (numHiddenNeurons x 784) array,\n",
    "# the first entry of which contains the weights of all inputs connecting\n",
    "# to the first hidden neuron; those weights will be displayed in (28 x 28) format\n",
    "# until all plots (4 x 4, i.e. 16) are \"filled\" or no more hidden neurons are left\n",
    "print(\"Visualization of the weights between input and some of the hidden neurons of the first hidden layer:\")\n",
    "fig, axes = plt.subplots(4, 4, figsize=(15,15))\n",
    "# use global min / max to ensure all weights are shown on the same scale\n",
    "weights = model.layers[0].get_weights()[0]\n",
    "vmin, vmax = weights.min(), weights.max()\n",
    "for coef, ax in zip(weights.T, axes.ravel()):\n",
    "    ax.matshow(coef.reshape(28, 28), cmap=plt.cm.gray, vmin=.5 * vmin,\n",
    "               vmax=.5 * vmax)\n",
    "    ax.set_xticks(())\n",
    "    ax.set_yticks(())\n",
    "\n",
    "plt.show()\n",
    "\n",
    "# Training\n",
    "history = model.fit(training_input, training_target, epochs=num_epochs, batch_size=batch_size, shuffle=\"True\", verbose=2)\n",
    "\n",
    "# plot training loss and accuracy \n",
    "plt.plot(history.history['loss'], color = 'blue', label = 'training loss')\n",
    "plt.plot(history.history['sparse_categorical_accuracy'], color = 'red', label = 'traning accuracy')\n",
    "plt.xlabel('Epoch number')\n",
    "plt.ylim(0, 1)\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "# model evaluation\n",
    "train_loss = history.history['loss'][num_epochs-1] \n",
    "train_acc = history.history['sparse_categorical_accuracy'][num_epochs-1]\n",
    "val_loss = model.evaluate(validation_input, validation_target)[0]\n",
    "val_acc = model.evaluate(validation_input, validation_target)[1]\n",
    "test_loss = model.evaluate(test_input, test_target)[0]\n",
    "test_acc = model.evaluate(test_input, test_target)[1]\n",
    "\n",
    "print(\"\\n\")\n",
    "print(\"final training loss: %f\" % train_loss)\n",
    "print(\"final training accuracy: %f\" % train_acc)\n",
    "print(\"final validation loss: %f\" % val_loss)\n",
    "print(\"final validation accuracy: %f\" % val_acc)\n",
    "print(\"final test loss: %f\" % test_loss)\n",
    "print(\"final test accuracy: %f\" % test_acc)\n",
    "print(\"\\n\")\n",
    "\n",
    "# histogram of weights (first layer) after training\n",
    "weights = model.layers[0].get_weights()[0]\n",
    "biases = model.layers[0].get_weights()[1]\n",
    "\n",
    "nBins = 100\n",
    "fig, axes = plt.subplots(1, 2, figsize=(15,10))\n",
    "axes[0].hist(weights.flatten(), nBins)\n",
    "axes[0].set_xlabel(\"weights\")\n",
    "axes[0].set_ylabel(\"counts\")\n",
    "axes[0].set_title(\"weight histogram after training\")\n",
    "\n",
    "axes[1].hist(biases.flatten(), nBins)\n",
    "axes[1].set_xlabel(\"biases\")\n",
    "axes[1].set_ylabel(\"counts\")\n",
    "axes[1].set_title(\"bias histogram after training\")\n",
    "plt.show()\n",
    "\n",
    "# visualize the weights between input layer and some \n",
    "# of the hidden neurons of the first hidden layer after training\n",
    "# model.layers[0].get_weights()[0] is a (784 x numHiddenNeurons) array\n",
    "# model.layers[0].get_weights()[0].T (transpose) is a (numHiddenNeurons x 784) array,\n",
    "# the first entry of which contains the weights of all inputs connecting\n",
    "# to the first hidden neuron; those weights will be displayed in (28 x 28) format\n",
    "# until all plots (4 x 4, i.e. 16) are \"filled\" or no more hidden neurons are left\n",
    "print(\"Visualization of the weights between input and some of the hidden neurons of the first hidden layer:\")\n",
    "fig, axes = plt.subplots(4, 4, figsize=(15,15))\n",
    "# use global min / max to ensure all weights are shown on the same scale\n",
    "weights = model.layers[0].get_weights()[0]\n",
    "vmin, vmax = weights.min(), weights.max()\n",
    "for coef, ax in zip(weights.T, axes.ravel()):\n",
    "    ax.matshow(coef.reshape(28, 28), cmap=plt.cm.gray, vmin=.5 * vmin,\n",
    "               vmax=.5 * vmax)\n",
    "    ax.set_xticks(())\n",
    "    ax.set_yticks(())\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# Answer #\n",
    "\n",
    "## num_hidden = [15] , Epochs = 30 batch_size = 2, AF = sigmoid ##\n",
    "\n",
    "number of layers: 2\n",
    "\n",
    "\n",
    "![IMAGE: isualization_of_the_weights_between_input_and_some_of_the_hidden_neurons](images/lab4_exercise_4_image_3_1.png)\n",
    "\n",
    "final training loss: 0.129285\n",
    "\n",
    "final training accuracy: 0.961020\n",
    "\n",
    "final validation loss: 0.176996\n",
    "\n",
    "final validation accuracy: 0.949500\n",
    "\n",
    "final test loss: 0.168526\n",
    "\n",
    "final test accuracy: 0.949500\n",
    "\n",
    "![IMAGE: isualization_of_the_weights_between_input_and_some_of_the_hidden_neurons](images/lab4_exercise_4_image_4.png)\n",
    "\n",
    "Visualization of the weights between input and some of the hidden neurons of the first hidden layer:\n",
    "\n",
    "![IMAGE: isualization_of_the_weights_between_input_and_some_of_the_hidden_neurons](images/lab4_exercise_4_image_3.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "## num_hidden =[15,25,50,75,100], Epochs = 30 batch_size = 2, AF = sigmoid ##\n",
    "\n",
    "number of layers: 6\n",
    "\n",
    "________________________________________________________________\n",
    "\n",
    "![IMAGE: hidden_5](images/lab4_exercise_4_hidden5_image3.png)\n",
    "\n",
    "\n",
    "final training loss: 0.256901\n",
    "\n",
    "final training accuracy: 0.935100\n",
    "\n",
    "final validation loss: 0.298294\n",
    "\n",
    "final validation accuracy: 0.928900\n",
    "\n",
    "final test loss: 0.316086\n",
    "\n",
    "final test accuracy: 0.924900\n",
    "\n",
    "![IMAGE: hidden_5](images/lab4_exercise_4_hidden5_image4.png)\n",
    "\n",
    "Visualization of the weights between input and some of the hidden neurons of the first hidden layer:\n",
    "\n",
    "![IMAGE: hidden_5](images/lab4_exercise_4_hidden5_image5.png)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## num_hidden =[15,25,50,75,100,150], Epochs = 30, batch_size = 2, AF = sigmoid ##\n",
    "\n",
    "number of layers: 7\n",
    "_________________________________________________________________\n",
    "\n",
    "![IMAGE: hidden_6](images/lab4_exercise_4_hidden6_image3.png)\n",
    "\n",
    "\n",
    "final training loss: 2.302258\n",
    "\n",
    "final training accuracy: 0.111620\n",
    "\n",
    "final validation loss: 2.303587\n",
    "\n",
    "final validation accuracy: 0.106400\n",
    "\n",
    "final test loss: 2.302365\n",
    "\n",
    "final test accuracy: 0.113500\n",
    "\n",
    "![IMAGE: hidden_6](images/lab4_exercise_4_hidden6_image4.png)\n",
    "\n",
    "Visualization of the weights between input and some of the hidden neurons of the first hidden layer:\n",
    "\n",
    "![IMAGE: hidden_6](images/lab4_exercise_4_hidden6_image5.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## num_hidden =[15,25,50,75,100,150], Epochs = 30, batch_size = 2, AF = relu ##\n",
    "\n",
    " number of layers: 7\n",
    "\n",
    "![IMAGE: hidden_6](images/lab4_exercise_4_hidden6_relu_img_3.png)\n",
    "\n",
    "final training loss: 0.089496\n",
    "\n",
    "final training accuracy: 0.972440\n",
    "\n",
    "final validation loss: 0.150481\n",
    "\n",
    "final validation accuracy: 0.963600\n",
    "\n",
    "final test loss: 0.170990\n",
    "\n",
    "final test accuracy: 0.956200\n",
    "\n",
    "![IMAGE: hidden_6](images/lab4_exercise_4_hidden6_relu_img_4.png)\n",
    "\n",
    "Visualization of the weights between input and some of the hidden neurons of the first hidden layer:\n",
    "\n",
    "![IMAGE: hidden_6](images/lab4_exercise_4_hidden6_relu_img_5.png)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Findings ###\n",
    "\n",
    "|| # hidden layer 1 | # hidden layer 5 | # hidden layer 6 | # hidden layer 6 and ReLU|\n",
    "| --- | --- | --- | --- | --- |\n",
    "|final training loss | 0.129285 | 0.256901 | 2.302258 | 0.089496 |\n",
    "|final training accuracy| 0.961020 | 0.935100 | 0.111620 | 0.972440 |\n",
    "|final validation loss | 0.176996 |  0.298294 | 2.303587 | 0.150481 |\n",
    "|final validation accuracy | 0.949500 | 0.928900 | 0.106400 | 0.963600 |\n",
    "|final test loss | 0.168526 | 0.316086 | 2.302365 | 0.170990 |\n",
    "|final test accuracy | 0.949500 | 0.924900 |  0.113500 | 0.956200 |\n",
    "\n",
    "\n",
    "In short, The network with 6 hidden layer and ReLU activation function is better then others. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "b)\tGive a theoretical justification, why the weights and biases of neurons in the first hidden layers in a multi-layer perceptron with many hidden layers are modified only slowly when using a sigmoid activation function and gradient descent. To this end, consider – as an example – a simplified network with three hidden layers (and a single neuron per layer), compute and analyse the change  of the bias of the first hidden neuron with respect to a change in the cost function C. What changes in your analysis when using a ReLU activation function instead of a sigmoid?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# Answer #\n",
    "\n",
    "## num_hidden =[1,1,1], Epochs = 30, batch_size = 2, AF = sigmoid ##\n",
    "\n",
    "number of layers: 4\n",
    "\n",
    "Total params: 809\n",
    "\n",
    "Trainable params: 809\n",
    "\n",
    "Non-trainable params: 0\n",
    "\n",
    "\n",
    "![IMAGE: hidden_sigmoid](images/lab4_exercise_4b_hidden3_sigmoid_img_1.png)\n",
    "\n",
    "\n",
    "final training loss: 1.750355\n",
    "\n",
    "final training accuracy: 0.267160\n",
    "\n",
    "final validation loss: 1.760427\n",
    "\n",
    "final validation accuracy: 0.242700\n",
    "\n",
    "final test loss: 1.769383\n",
    "\n",
    "final test accuracy: 0.241900\n",
    "\n",
    "\n",
    "![IMAGE: hidden_sigmoid](images/lab4_exercise_4b_hidden3_sigmoid_img_2.png)\n",
    "\n",
    "Visualization of the weights between input and some of the hidden neurons of the first hidden layer:\n",
    "\n",
    "\n",
    "![IMAGE: hidden_sigmoid](images/lab4_exercise_4b_hidden3_sigmoid_img_3.png)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "## num_hidden =[1,1,1], Epochs = 30, batch_size = 2, AF = relu ##\n",
    "\n",
    "\n",
    "... number of layers: 4\n",
    "\n",
    "Total params: 809\n",
    "\n",
    "Trainable params: 809\n",
    "\n",
    "Non-trainable params: 0\n",
    "__________________________\n",
    "\n",
    "![IMAGE: hidden_3_relu](images/lab4_exercise_4b_hidden3_relu_img_1.png)\n",
    "\n",
    "\n",
    "final training loss: 2.302084\n",
    "\n",
    "final training accuracy: 0.112120\n",
    "\n",
    "final validation loss: 2.304083\n",
    "\n",
    "final validation accuracy: 0.106400\n",
    "\n",
    "final test loss: 2.302129\n",
    "\n",
    "final test accuracy: 0.113500\n",
    "\n",
    "![IMAGE:hidden3_relu](images/lab4_exercise_4b_hidden3_relu_img_3.png)\n",
    "\n",
    "Visualization of the weights between input and some of the hidden neurons of the first hidden layer:\n",
    "\n",
    "![IMAGE:hidden3_relu](images/lab4_exercise_4b_hidden3_relu_img_2.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Findings ###\n",
    "\n",
    "|| # hidden layer 3 (sigmoid) | # hidden layer 3 (relu) |\n",
    "| --- | --- | --- | \n",
    "|final training loss | 1.750355| 2.302084 |\n",
    "|final training accuracy| 0.267160 | 0.112120 |\n",
    "|final validation loss | 1.760427 |  2.304083 |\n",
    "|final validation accuracy | 0.242700 | 0.106400 |\n",
    "|final test loss | 1.769383 | 2.302129 |\n",
    "|final test accuracy | 0.241900 | 0.113500 |\n",
    "\n",
    "\n",
    "In short, with less number of perceptron sigmoid acivation function works better. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "c)\tStarting from your analysis for the multi-layer perceptron with six hidden layers and sigmoid activation function in part a), try to find other model configurations which lead to a successful training. You may modify e.g. the learning rate and batch size, the weight and bias initialization, apply batch normalization and / or dropout, and add regularization."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Answer #\n",
    "\n",
    "\n",
    "### num_hidden = [15,25,50,75,100,150], Activation = relu, learningRate= 0.01, batch = 4, epochs = 30, regularization_weight = 0.0 ##\n",
    "\n",
    "![IMAGe:batch4_relu](images/lab4_exercise_4c_hidden3_relu_img_bacth4_img_1.png)\n",
    "\n",
    "final training loss: 0.076854\n",
    "\n",
    "final training accuracy: 0.975940\n",
    "\n",
    "final validation loss: 0.181777\n",
    "\n",
    "final validation accuracy: 0.953900\n",
    "\n",
    "final test loss: 0.203929\n",
    "\n",
    "final test accuracy: 0.950300\n",
    "\n",
    "![IMAGe:batch4_relu](images/lab4_exercise_4c_hidden3_relu_img_bacth4_img_5.png)\n",
    "\n",
    "\n",
    "\n",
    "### num_hidden = [15,25,50,75,100,150], Activation = sigmoid, learningRate= 0.01, batch = 4, epochs = 30, regularization_weight = 0.0 ##\n",
    "\n",
    "![IMAGe:batch4_sigmoid](images/lab4_exercise_4c_hidden3_sigmoid_img_bacth4_img_1.png)\n",
    "\n",
    "final training loss: 2.301880\n",
    "\n",
    "final training accuracy: 0.112420\n",
    "\n",
    "final validation loss: 2.304394\n",
    "\n",
    "final validation accuracy: 0.106400\n",
    "\n",
    "final test loss: 2.302055\n",
    "\n",
    "final test accuracy: 0.113500\n",
    "\n",
    "\n",
    "![IMAGe:batch4_sigmoid](images/lab4_exercise_4c_hidden3_sigmoid_img_bacth4_img_bias_weight.png)\n",
    "\n",
    "Visualization of the weights between input and some of the hidden neurons of the first hidden layer:\n",
    "\n",
    "![IMAGe:batch4_sigmoid](images/lab4_exercise_4c_hidden3_sigmoid_img_bacth4_output.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### num_hidden = [15,25,50,75,100,150], Activation = sigmoid, learningRate= 0.01, batch = 4, epochs = 30, regularization_weight = 0.01, dropout = 0.2 ##\n",
    "\n",
    "![IMAGe:batch4_relu](images/lab4_exercise_4c_hidden3_sigmoid_img_bacth4_dropout_loss.png)\n",
    "\n",
    "final training loss: 2.374155\n",
    "\n",
    "final training accuracy: 0.100940\n",
    "\n",
    "final validation loss: 2.358470\n",
    "\n",
    "final validation accuracy: 0.106400\n",
    "\n",
    "final test loss: 2.357207\n",
    "\n",
    "final test accuracy: 0.113500\n",
    "\n",
    "\n",
    "### num_hidden = [16,25,50,75,100,150], initialLearningRate = 0.001, batch_size = 4, dropout = 0.0, regularization_weight = 0.0, batch_normalization = False ###\n",
    "\n",
    "final training loss: 2.303313\n",
    "\n",
    "final training accuracy: 0.108400\n",
    "\n",
    "final validation loss: 2.303749\n",
    "\n",
    "final validation accuracy: 0.106400\n",
    "\n",
    "final test loss: 2.302264\n",
    "\n",
    "final test accuracy: 0.113500\n",
    "\n",
    "\n",
    "### num_hidden = [16,25,50,75,100,150], Activation = sigmoid, initialLearningRate = 0.01, batch_size = 4, dropout = 0.0, regularization_weight = 0.0, batch_normalization = True ###\n",
    "\n",
    "![IMAGe:batch4_relu](images/lab4_exercise_4c_hidden3_sigmoid_img_bacth4_b_normal_1.png)\n",
    "\n",
    "\n",
    "final training loss: 0.315673\n",
    "\n",
    "final training accuracy: 0.913880\n",
    "\n",
    "final validation loss: 0.813610\n",
    "\n",
    "final validation accuracy: 0.724200\n",
    "\n",
    "final test loss: 0.832318\n",
    "\n",
    "final test accuracy: 0.708700\n",
    "\n",
    "![IMAGe:batch4_relu](images/lab4_exercise_4c_hidden3_sigmoid_img_bacth4_b_normal_2.png)\n",
    "\n",
    "Visualization of the weights between input and some of the hidden neurons of the first hidden layer:\n",
    "\n",
    "![IMAGe:batch4_relu](images/lab4_exercise_4c_hidden3_sigmoid_img_bacth4_b_normal_3.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### num_hidden = [16,25,50,75,100,150], Activation = relu, initialLearningRate = 0.01, batch_size = 4, dropout = 0.0, regularization_weight = 0.0, batch_normalization = True ###\n",
    "\n",
    "\n",
    "final training loss: 0.315673\n",
    "\n",
    "final training accuracy: 0.913880\n",
    "\n",
    "final validation loss: 0.813610\n",
    "\n",
    "final validation accuracy: 0.724200\n",
    "\n",
    "final test loss: 0.832318\n",
    "\n",
    "final test accuracy: 0.708700\n",
    "\n",
    "\n",
    "#### Findings ####\n",
    "\n",
    "Training accuracy always increase if we use \"relu\" activation function with large number of perceptron each layer."
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "Lab3.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
